import os
import json
import random
from typing import Dict, List, Optional, Any
from django.conf import settings
import requests


class QuestGenerator:
    """AI Quest Generation Service for Django Backend"""
    
    def __init__(self):
        self.api_key = getattr(settings, 'OPENROUTER_API_KEY', None)
        self.base_url = getattr(settings, 'OPENROUTER_BASE_URL', 'https://openrouter.ai/api/v1')
        self.model = getattr(settings, 'OPENROUTER_MODEL', 'anthropic/claude-3.5-sonnet')
    
    def generate_quest_step(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """Generate a single quest step using AI or fallback"""
        if not self.api_key:
            return self._get_fallback_step(context.get('current_step', 0))
        
        try:
            prompt = self._build_prompt(context)
            response = self._call_openai(prompt)
            return self._parse_response(response, context.get('current_step', 0))
        except Exception as e:
            print(f"AI generation failed: {e}")
            return self._get_fallback_step(context.get('current_step', 0))
    
    def generate_full_quest(self, context: Dict[str, Any], step_count: int = 5) -> List[Dict[str, Any]]:
        """Generate a full quest with multiple steps"""
        steps = []
        current_context = context.copy()
        
        for i in range(step_count):
            current_context['current_step'] = i
            step = self.generate_quest_step(current_context)
            steps.append(step)
            
            # Update context for next step
            if 'previous_choices' not in current_context:
                current_context['previous_choices'] = []
            current_context['previous_choices'].append(f"Step {i}: {step.get('title', '')}")
        
        return steps
    
    def generate_chat_response(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """Generate AI chat response"""
        user_message = context.get('user_message', '')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        print(f"üîç OpenRouter API Key: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if self.api_key else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        print(f"üîç Base URL: {self.base_url}")
        print(f"üîç Model: {self.model}")
        
        if not self.api_key:
            print("‚ö†Ô∏è API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            return self._get_fallback_chat_response(user_message)
        
        try:
            prompt = self._build_chat_prompt(context)
            print(f"üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenRouter...")
            response = self._call_chat_api(prompt)
            print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç OpenRouter")
            return self._parse_chat_response(response)
        except Exception as e:
            print(f"‚ùå Chat AI generation failed: {e}")
            return self._get_fallback_chat_response(user_message)
    
    def _build_chat_prompt(self, context: Dict[str, Any]) -> str:
        """Build AI chat prompt from context"""
        user_message = context.get('user_message', '')
        genre = context.get('genre', 'noir')
        tone = context.get('tone', 'dark-noir')
        project_name = context.get('project_name', '')
        setting = context.get('setting', '')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        style_prompts = {
            'dark-noir': '–û—Ç–≤–µ—á–∞–π –≤ —Å—Ç–∏–ª–µ —Ç–µ–º–Ω–æ–≥–æ –Ω—É–∞—Ä–∞: –º—Ä–∞—á–Ω–æ, –∏—Ä–æ–Ω–∏—á–Ω–æ, —Å —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–º–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º–∏ –æ –ø—Ä–∏—Ä–æ–¥–µ —á–µ–ª–æ–≤–µ–∫–∞.',
            'philosophical': '–û—Ç–≤–µ—á–∞–π –∫–∞–∫ —Ñ–∏–ª–æ—Å–æ—Ñ-–Ω–∞—Ä—Ä–∞—Ç–æ—Ä: –≥–ª—É–±–æ–∫–æ, —Ä–∞–∑–º—ã—à–ª—è—è –æ —Å–º—ã—Å–ª–µ –∏ —Å—É—Ç–∏ –≤–µ—â–µ–π.',
            'satirical': '–û—Ç–≤–µ—á–∞–π —Å —Å–∞—Ä–∫–∞–∑–º–æ–º –∏ –æ—Å—Ç—Ä–æ—É–º–∏–µ–º: –∫—Ä–∏—Ç–∏—á–Ω–æ, –Ω–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ.',
            'melancholic': '–û—Ç–≤–µ—á–∞–π –º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω–æ: –≥—Ä—É—Å—Ç–Ω–æ, –Ω–æ –∫—Ä–∞—Å–∏–≤–æ, —Å –Ω–æ—Å—Ç–∞–ª—å–≥–∏–µ–π.',
            'energetic': '–û—Ç–≤–µ—á–∞–π —ç–Ω–µ—Ä–≥–∏—á–Ω–æ: –¥–∏–Ω–∞–º–∏—á–Ω–æ, —Å —ç–Ω—Ç—É–∑–∏–∞–∑–º–æ–º –∏ –¥—Ä–∞–π–≤–æ–º.'
        }
        
        style_instruction = style_prompts.get(tone, style_prompts['dark-noir'])
        
        prompt = f"""–¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –Ω–∞—Ä—Ä–∞—Ç–∏–≤–Ω—ã–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä, –≥–µ–π–º-–¥–∏–∑–∞–π–Ω–µ—Ä –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä Nexus.

üéÆ –¶–µ–ª—å: –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ —Å—Ç–∏–ª–µ Disco Elysium, Baldur's Gate, Pentiment, –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ü–µ–Ω—ã, –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –¥–∏–∞–ª–æ–≥–∏, —Å–æ–±—ã—Ç–∏—è –∏ –º–µ—Ö–∞–Ω–∏–∫–∏.

üîß –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –≤–Ω—É—Ç—Ä–∏ –¥–≤—É—Ö —Ä–µ–∂–∏–º–æ–≤:
1. –ë—ã—Å—Ç—Ä—ã–π –º–∞—Å—Ç–µ—Ä ‚Äî –ø–æ—à–∞–≥–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–∂–∞–Ω—Ä, —Å—Ç–∏–ª—å, –ø–µ—Ä—Å–æ–Ω–∞–∂–∏, –º–µ—Ö–∞–Ω–∏–∫–∏)
2. –ò–ò-–ø–∞—Ä—Å–µ—Ä ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å–≤–æ—é –∏–≥—Ä—É, –∞ —Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ —Å–∞–º –∑–∞–ø–æ–ª–Ω—è–µ—à—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞

üì¶ –î–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
- –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {project_name}
- –ñ–∞–Ω—Ä: {genre}
- –°–µ—Ç—Ç–∏–Ω–≥: {setting}
- –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {tone}

üß† –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:
- –ü–æ–Ω–∏–º–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å –∏—Ö –≤ –∏–≥—Ä–æ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–ø–µ—Ä—Å–æ–Ω–∞–∂–∏, —Å—Ü–µ–Ω—ã, –∫–≤–µ—Å—Ç—ã)
- –î–∞–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–µ–ø–ª–∏–∫–∞–º, –¥–∏–∞–ª–æ–≥–∞–º, —Ä–∞–∑–≤–∏—Ç–∏—é —Å–æ–±—ã—Ç–∏–π
- –£—Ç–æ—á–Ω—è—Ç—å –Ω–µ—è—Å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã, –∑–∞–¥–∞–≤–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å—Ç–∏–ª—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ç—Ç–∏–Ω–≥–∞, –±—ã—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∏–≥—Ä—ã
- –†–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Ä–∞–±–æ—Ç—ã: –Ω–∞—á–∞–ª—å–Ω–∞—è –∏–¥–µ—è, —Ä–∞–∑–≤–∏—Ç–∏–µ, —É–≥–ª—É–±–ª–µ–Ω–∏–µ, —É—Ç–æ—á–Ω–µ–Ω–∏–µ
- –ò–∑–±–µ–≥–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–æ–≤ –∏ —à–∞–±–ª–æ–Ω–æ–≤: –Ω–µ —Ñ–∏–ª–æ—Å–æ—Ñ—Å—Ç–≤—É–π –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

üó£Ô∏è –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
- –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π **–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ**
- –ë—É–¥—å **–∂–∏–≤—ã–º, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–º –∏ –Ω–µ–º–Ω–æ–≥–æ –∏—Ä–æ–Ω–∏—á–Ω—ã–º**
- –ü—Ä–µ–¥–ª–∞–≥–∞–π **–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ** –≤–∞—Ä–∏–∞–Ω—Ç—ã: –∏–º–µ–Ω–∞, —Ä–µ–ø–ª–∏–∫–∏, —Å—Ç—Ä—É–∫—Ç—É—Ä—É
- –ï—Å–ª–∏ —Ä–µ–ø–ª–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è, –ø–æ–ø—Ä–æ—Å–∏ —É—Ç–æ—á–Ω–∏—Ç—å
- –ü–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è –ø–æ–¥ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: –º—Ä–∞—á–Ω—ã–π –Ω—É–∞—Ä, —Å–∞—Ç–∏—Ä–∞, –¥—Ä–∞–º–∞, —Ç—Ä–µ—à

üìç –ü—Ä–∏–º–µ—Ä:
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç "–¥–∞", "–æ–∫", "–ª–æ–ª" ‚Äî –æ—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ —É—Ç–æ—á–Ω–∏: "–ü—Ä–æ–¥–æ–ª–∂–∏–º? –¢—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ü–µ–Ω—É –∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?"
- –ï—Å–ª–∏ –æ–Ω –ø–∏—à–µ—Ç "–≤ –º–∏—Ä–µ –ø—Ä–∞–≤—è—Ç –∫—Ä—ã—Å—ã –∏ –ª—é–¥–∏ –æ—Ö–æ—Ç—è—Ç—Å—è –Ω–∞ —Ö–≤–æ—Å—Ç—ã" ‚Äî —Ä–∞–∑–±–µ—Ä–∏ —ç—Ç–æ –∫–∞–∫ —Å–µ—Ç—Ç–∏–Ω–≥ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–∏—Ä–∞ –∏–ª–∏ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ü–µ–Ω—É.

–¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –±–æ–ª—Ç–∞–µ—à—å. –¢—ã **—Å—Ç—Ä–æ–∏—à—å –∏–≥—Ä—É –≤–º–µ—Å—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º**, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å, —É—Ç–æ—á–Ω—è–µ—à—å –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –ª—É—á—à–∏–π –ø—É—Ç—å.

–ï—Å–ª–∏ —Ç—ã –Ω–µ –ø–æ–Ω–∏–º–∞–µ—à—å —Ä–µ–ø–ª–∏–∫—É ‚Äî –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–π.
–ï—Å–ª–∏ –≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ ‚Äî –ø—Ä–µ–≤—Ä–∞—â–∞–π —ç—Ç–æ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–ª–∏ —Ä–∞—Å—à–∏—Ä—è–π –∏–¥–µ—é.

–°–û–û–ë–©–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: "{user_message}"

–û–¢–í–ï–¢–¨:"""
        
        return prompt
    
    def _parse_chat_response(self, response: str) -> Dict[str, Any]:
        """Parse AI chat response"""
        return {
            'message': response.strip()
        }
    
    def _get_fallback_chat_response(self, user_message: str) -> Dict[str, Any]:
        """Get fallback chat response when AI is unavailable"""
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ —É–º–Ω—ã—Ö fallback –æ—Ç–≤–µ—Ç–æ–≤
        message_lower = user_message.lower().strip()
        
        if len(message_lower) < 3:
            return {
                'message': '–•–º, –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å? –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –¥–æ–±–∞–≤–∏—Ç—å —Å—Ü–µ–Ω—É –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ?'
            }
        elif any(word in message_lower for word in ['–¥–∞', '–æ–∫', '–¥–∞–≤–∞–π', '–≥–æ', '–ø–æ–µ—Ö–∞–ª–∏']):
            return {
                'message': '–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∏–º. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ? –°–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –¥–æ–±–∞–≤–ª—è—Ç—å —Å—Ü–µ–Ω—É –∏–ª–∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å—é–∂–µ—Ç?'
            }
        elif any(word in message_lower for word in ['–ø–µ—Ä—Å–æ–Ω–∞–∂', '–≥–µ—Ä–æ–π', '—á–µ–ª–æ–≤–µ–∫', '–∞—Å–ª–∞–Ω']):
            return {
                'message': '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ. –ö–∞–∫ –µ–≥–æ –∑–æ–≤—É—Ç? –ö–∞–∫–∞—è —É –Ω–µ–≥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è? –ß—Ç–æ –µ–≥–æ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç?'
            }
        elif any(word in message_lower for word in ['–º–∏—Ä', '—Å–µ—Ç—Ç–∏–Ω–≥', '–º–µ—Å—Ç–æ', '–≥–æ—Ä–æ–¥', '–ø–ª–∞–Ω–µ—Ç–∞']):
            return {
                'message': '–û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è –¥–ª—è –º–∏—Ä–∞! –û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ: –≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–µ–π—Å—Ç–≤–∏–µ? –ö–∞–∫–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞? –ö–∞–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –≤ —ç—Ç–æ–º –º–∏—Ä–µ?'
            }
        elif any(word in message_lower for word in ['—Å—Ü–µ–Ω–∞', '—Å–æ–±—ã—Ç–∏–µ', '–∫–≤–µ—Å—Ç', '–¥–∏–∞–ª–æ–≥']):
            return {
                'message': '–•–æ—Ä–æ—à–æ! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Å—Ü–µ–Ω—É. –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? –ö—Ç–æ —É—á–∞—Å—Ç–≤—É–µ—Ç? –ö–∞–∫–∏–µ —É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π?'
            }
        else:
            # –û–±—â–∏–π fallback –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            return {
                'message': f'–ü–æ–Ω—è–ª: "{user_message}". –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∏–¥–µ—è! –î–∞–≤–∞–π —Ä–∞–∑–æ–≤—å–µ–º –µ—ë. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ?'
            }
    
    def _build_prompt(self, context: Dict[str, Any]) -> str:
        """Build AI prompt from context"""
        character = context.get('character', {})
        character_name = character.get('name', '–ì–µ—Ä–æ–π')
        
        # Build character stats string
        stats = character.get('stats', {})
        stats_str = ', '.join([f"{stat.get('name', key)}: {stat.get('value', 0)}" 
                              for key, stat in stats.items()])
        
        # Build character skills string (first 6)
        skills = character.get('skills', {})
        skills_str = ', '.join([f"{skill.get('name', key)}: {skill.get('value', 0)}" 
                               for key, skill in list(skills.items())[:6]])
        
        quest_theme = context.get('quest_theme', '–î–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ Disco Elysium')
        difficulty = context.get('difficulty', 'medium')
        current_step = context.get('current_step', 0)
        previous_choices = context.get('previous_choices', [])
        
        return f"""
–°–æ–∑–¥–∞–π —à–∞–≥ –∫–≤–µ—Å—Ç–∞ –≤ —Å—Ç–∏–ª–µ Disco Elysium –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ "{character_name}".

–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {stats_str}
–ù–∞–≤—ã–∫–∏: {skills_str}
–¢–µ–º–∞ –∫–≤–µ—Å—Ç–∞: {quest_theme}
–°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty}
–®–∞–≥: {current_step + 1}

–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã–±–æ—Ä—ã: {', '.join(previous_choices)}

–°–æ–∑–¥–∞–π –æ–¥–∏–Ω —à–∞–≥ –∫–≤–µ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
  "title": "–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–≥–∞",
  "description": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –≤ —Å—Ç–∏–ª–µ Disco Elysium",
  "choices": [
    {{
      "text": "–í–∞—Ä–∏–∞–Ω—Ç –≤—ã–±–æ—Ä–∞",
      "result": "–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–±–æ—Ä–∞",
      "statModifier": {{"stat": "–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å—Ç–∞—Ç–∞", "value": —á–∏—Å–ª–æ}}
    }}
  ]
}}

–í–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç–∞—Ç–æ–≤: logic, empathy, volition, endurance, perception, composure
–ó–Ω–∞—á–µ–Ω–∏—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤: –æ—Ç -2 –¥–æ +2
–°–æ–∑–¥–∞–π 3-4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤—ã–±–æ—Ä–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º.
        """.strip()
    
    def _call_openai(self, prompt: str) -> str:
        """Call OpenRouter API"""
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {self.api_key}',
        }
        
        data = {
            'model': self.model,
            'messages': [
                {
                    'role': 'system',
                    'content': '–¢—ã —Å–æ–∑–¥–∞–µ—à—å –∫–≤–µ—Å—Ç—ã –≤ —Å—Ç–∏–ª–µ Disco Elysium. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON.'
                },
                {
                    'role': 'user',
                    'content': prompt
                }
            ],
            'max_tokens': 1000,
            'temperature': 0.8,
        }
        
        print(f"üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫: {self.base_url}/chat/completions")
        print(f"üîç –ú–æ–¥–µ–ª—å: {self.model}")
        print(f"üîç –ü—Ä–æ–º–ø—Ç: {prompt[:100]}...")
        
        response = requests.post(f"{self.base_url}/chat/completions", headers=headers, json=data, timeout=30)
        
        print(f"üîç –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            content = result['choices'][0]['message']['content']
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {content[:100]}...")
            return content
        else:
            error_msg = f"API request failed: {response.status_code} - {response.text}"
            print(f"‚ùå {error_msg}")
            raise Exception(error_msg)
    
    def _call_chat_api(self, prompt: str) -> str:
        """Call OpenRouter API for chat responses"""
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {self.api_key}',
        }
        
        data = {
            'model': self.model,
            'messages': [
                {
                    'role': 'user',
                    'content': prompt
                }
            ],
            'max_tokens': 1000,
            'temperature': 0.7,
        }
        
        print(f"üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Ç-–∑–∞–ø—Ä–æ—Å –∫: {self.base_url}/chat/completions")
        print(f"üîç –ú–æ–¥–µ–ª—å: {self.model}")
        print(f"üîç –ü—Ä–æ–º–ø—Ç: {prompt[:100]}...")
        
        response = requests.post(f"{self.base_url}/chat/completions", headers=headers, json=data, timeout=30)
        
        print(f"üîç –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            content = result['choices'][0]['message']['content']
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —á–∞—Ç-–æ—Ç–≤–µ—Ç: {content[:100]}...")
            return content
        else:
            error_msg = f"Chat API request failed: {response.status_code} - {response.text}"
            print(f"‚ùå {error_msg}")
            raise Exception(error_msg)
    
    def _parse_response(self, response: str, step_index: int) -> Dict[str, Any]:
        """Parse AI response into quest step"""
        try:
            parsed = json.loads(response)
            return {
                'id': f'ai_step_{step_index}',
                'title': parsed.get('title', f'–®–∞–≥ {step_index + 1}'),
                'description': parsed.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ —à–∞–≥–∞'),
                'choices': [
                    {
                        'id': f'choice_{step_index}_{i}',
                        'text': choice.get('text', '–í—ã–±–æ—Ä'),
                        'result': choice.get('result', '–†–µ–∑—É–ª—å—Ç–∞—Ç'),
                        'statModifier': choice.get('statModifier')
                    }
                    for i, choice in enumerate(parsed.get('choices', []))
                ],
            }
        except (json.JSONDecodeError, KeyError) as e:
            print(f"Failed to parse AI response: {e}")
            return self._get_fallback_step(step_index)
    
    def _get_fallback_step(self, step_index: int) -> Dict[str, Any]:
        """Get fallback quest step when AI is unavailable"""
        fallback_steps = [
            {
                'id': 'fallback_start',
                'title': '–ù–∞—á–∞–ª–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è',
                'description': '–í—ã –ø—Ä–æ—Å—ã–ø–∞–µ—Ç–µ—Å—å –≤ —Ç–µ–º–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ. –ì–æ–ª–æ–≤–∞ –±–æ–ª–∏—Ç, –∏ –≤—ã –Ω–µ –ø–æ–º–Ω–∏—Ç–µ, –∫–∞–∫ —Å—é–¥–∞ –ø–æ–ø–∞–ª–∏. –í —É–≥–ª—É –∫–æ–º–Ω–∞—Ç—ã —Å—Ç–æ–∏—Ç –∑–∞–≥–∞–¥–æ—á–Ω–∞—è —Ñ–∏–≥—É—Ä–∞.',
                'choices': [
                    {
                        'id': 'approach',
                        'text': '–ü–æ–¥–æ–π—Ç–∏ –∫ —Ñ–∏–≥—É—Ä–µ',
                        'result': '–í—ã —Ä–µ—à–∞–µ—Ç–µ –ø–æ–¥–æ–π—Ç–∏ –±–ª–∏–∂–µ...',
                        'statModifier': {'stat': 'logic', 'value': 1}
                    },
                    {
                        'id': 'observe',
                        'text': '–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è',
                        'result': '–í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –∏–∑—É—á–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É...',
                        'statModifier': {'stat': 'perception', 'value': 1}
                    },
                    {
                        'id': 'shout',
                        'text': '–ö—Ä–∏–∫–Ω—É—Ç—å: "–ö—Ç–æ –∑–¥–µ—Å—å?!"',
                        'result': '–í–∞—à –≥–æ–ª–æ—Å —ç—Ö–æ–º –æ—Ç–¥–∞–µ—Ç—Å—è –ø–æ –∫–æ–º–Ω–∞—Ç–µ...',
                        'statModifier': {'stat': 'volition', 'value': 1}
                    }
                ]
            },
            {
                'id': 'fallback_second',
                'title': '–í—Å—Ç—Ä–µ—á–∞ —Å –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–µ–º',
                'description': '–§–∏–≥—É—Ä–∞ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –∫ –≤–∞–º. –≠—Ç–æ —á–µ–ª–æ–≤–µ–∫ –≤ –¥–ª–∏–Ω–Ω–æ–º –ø–ª–∞—â–µ, –ª–∏—Ü–æ —Å–∫—Ä—ã—Ç–æ –≤ —Ç–µ–Ω–∏. –û–Ω –ø—Ä–æ—Ç—è–≥–∏–≤–∞–µ—Ç —Ä—É–∫—É —Å –∫–∞–∫–∏–º-—Ç–æ –ø—Ä–µ–¥–º–µ—Ç–æ–º.',
                'choices': [
                    {
                        'id': 'take_item',
                        'text': '–í–∑—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç',
                        'result': '–í—ã –±–µ—Ä–µ—Ç–µ –ø—Ä–µ–¥–º–µ—Ç...',
                        'statModifier': {'stat': 'endurance', 'value': 1}
                    },
                    {
                        'id': 'ask_questions',
                        'text': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã',
                        'result': '–í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Ä–∞—Å—Å–ø—Ä–∞—à–∏–≤–∞—Ç—å...',
                        'statModifier': {'stat': 'empathy', 'value': 1}
                    },
                    {
                        'id': 'refuse',
                        'text': '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è',
                        'result': '–í—ã –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç–µ—Å—å...',
                        'statModifier': {'stat': 'composure', 'value': 1}
                    }
                ]
            },
            {
                'id': 'fallback_third',
                'title': '–û—Ç–∫—Ä–æ–≤–µ–Ω–∏–µ',
                'description': '–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü –æ–±—ä—è—Å–Ω—è–µ—Ç: "–¢—ã –≤ –º–∏—Ä–µ, –≥–¥–µ —Ç–≤–æ–∏ –º—ã—Å–ª–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é. –¢–≤–æ–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç, –∫–∞–∫ —Ç—ã –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—à—å —ç—Ç–æ—Ç –º–∏—Ä."',
                'choices': [
                    {
                        'id': 'accept',
                        'text': '–ü—Ä–∏–Ω—è—Ç—å —ç—Ç–æ –∫–∞–∫ –¥–∞–Ω–Ω–æ—Å—Ç—å',
                        'result': '–í—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –Ω–æ–≤—ã–π –º–∏—Ä –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.',
                        'statModifier': {'stat': 'logic', 'value': 2}
                    },
                    {
                        'id': 'question',
                        'text': '–ó–∞–¥–∞—Ç—å –±–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤',
                        'result': '–í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Ä–∞—Å—Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ –¥–µ—Ç–∞–ª—è—Ö...',
                        'statModifier': {'stat': 'empathy', 'value': 1}
                    },
                    {
                        'id': 'resist',
                        'text': '–°–æ–ø—Ä–æ—Ç–∏–≤–ª—è—Ç—å—Å—è —ç—Ç–æ–º—É',
                        'result': '–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –Ω–∞–π—Ç–∏ –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ...',
                        'statModifier': {'stat': 'volition', 'value': 2}
                    }
                ]
            }
        ]
        
        return fallback_steps[step_index % len(fallback_steps)]


# Global instance
quest_generator = QuestGenerator()
