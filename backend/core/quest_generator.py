import os
import json
import random
from typing import Dict, List, Optional, Any
from django.conf import settings
import requests


class QuestGenerator:
    """AI Quest Generation Service for Django Backend"""
    
    def __init__(self):
        self.api_key = getattr(settings, 'OPENROUTER_API_KEY', None)
        self.base_url = getattr(settings, 'OPENROUTER_BASE_URL', 'https://openrouter.ai/api/v1')
        self.model = getattr(settings, 'OPENROUTER_MODEL', 'anthropic/claude-3.5-sonnet')
    
    def generate_quest_step(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """Generate a single quest step using AI or fallback"""
        if not self.api_key:
            return self._get_fallback_step(context.get('current_step', 0))
        
        try:
            prompt = self._build_prompt(context)
            response = self._call_openai(prompt)
            return self._parse_response(response, context.get('current_step', 0))
        except Exception as e:
            print(f"AI generation failed: {e}")
            return self._get_fallback_step(context.get('current_step', 0))
    
    def generate_full_quest(self, context: Dict[str, Any], step_count: int = 5) -> List[Dict[str, Any]]:
        """Generate a full quest with multiple steps"""
        steps = []
        current_context = context.copy()
        
        for i in range(step_count):
            current_context['current_step'] = i
            step = self.generate_quest_step(current_context)
            steps.append(step)
            
            # Update context for next step
            if 'previous_choices' not in current_context:
                current_context['previous_choices'] = []
            current_context['previous_choices'].append(f"Step {i}: {step.get('title', '')}")
        
        return steps
    
    def generate_chat_response(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """Generate AI chat response"""
        user_message = context.get('user_message', '')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        print(f"üîç OpenRouter API Key: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if self.api_key else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        print(f"üîç Base URL: {self.base_url}")
        print(f"üîç Model: {self.model}")
        
        if not self.api_key:
            print("‚ö†Ô∏è API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            return self._get_fallback_chat_response(user_message)
        
        try:
            prompt = self._build_chat_prompt(context)
            print(f"üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenRouter...")
            response = self._call_chat_api(prompt)
            print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç OpenRouter")
            return self._parse_chat_response(response)
        except Exception as e:
            print(f"‚ùå Chat AI generation failed: {e}")
            return self._get_fallback_chat_response(user_message)
    
    def _build_chat_prompt(self, context: Dict[str, Any]) -> str:
        """Build AI chat prompt from context"""
        user_message = context.get('user_message', '')
        genre = context.get('genre', 'noir')
        tone = context.get('tone', 'dark-noir')
        project_name = context.get('project_name', '')
        setting = context.get('setting', '')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        style_prompts = {
            'dark-noir': '–û—Ç–≤–µ—á–∞–π –≤ —Å—Ç–∏–ª–µ —Ç–µ–º–Ω–æ–≥–æ –Ω—É–∞—Ä–∞: –º—Ä–∞—á–Ω–æ, –∏—Ä–æ–Ω–∏—á–Ω–æ, —Å —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–º–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º–∏ –æ –ø—Ä–∏—Ä–æ–¥–µ —á–µ–ª–æ–≤–µ–∫–∞.',
            'philosophical': '–û—Ç–≤–µ—á–∞–π –∫–∞–∫ —Ñ–∏–ª–æ—Å–æ—Ñ-–Ω–∞—Ä—Ä–∞—Ç–æ—Ä: –≥–ª—É–±–æ–∫–æ, —Ä–∞–∑–º—ã—à–ª—è—è –æ —Å–º—ã—Å–ª–µ –∏ —Å—É—Ç–∏ –≤–µ—â–µ–π.',
            'satirical': '–û—Ç–≤–µ—á–∞–π —Å —Å–∞—Ä–∫–∞–∑–º–æ–º –∏ –æ—Å—Ç—Ä–æ—É–º–∏–µ–º: –∫—Ä–∏—Ç–∏—á–Ω–æ, –Ω–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ.',
            'melancholic': '–û—Ç–≤–µ—á–∞–π –º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω–æ: –≥—Ä—É—Å—Ç–Ω–æ, –Ω–æ –∫—Ä–∞—Å–∏–≤–æ, —Å –Ω–æ—Å—Ç–∞–ª—å–≥–∏–µ–π.',
            'energetic': '–û—Ç–≤–µ—á–∞–π —ç–Ω–µ—Ä–≥–∏—á–Ω–æ: –¥–∏–Ω–∞–º–∏—á–Ω–æ, —Å —ç–Ω—Ç—É–∑–∏–∞–∑–º–æ–º –∏ –¥—Ä–∞–π–≤–æ–º.'
        }
        
        style_instruction = style_prompts.get(tone, style_prompts['dark-noir'])
        
        prompt = f"""–¢—ã - –Ω–∞—Ä—Ä–∞—Ç–∏–≤–Ω—ã–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä, —Å–æ–∑–¥–∞—é—â–∏–π –º–∏—Ä—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–≤–µ–ª–ª –≤ —Å—Ç–∏–ª–µ Disco Elysium.

–ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–ï–ö–¢–ê:
- –ù–∞–∑–≤–∞–Ω–∏–µ: {project_name}
- –ñ–∞–Ω—Ä: {genre}
- –°–µ—Ç—Ç–∏–Ω–≥: {setting}
- –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {tone}

–°–¢–ò–õ–¨ –û–¢–í–ï–¢–ê:
{style_instruction}

–¢–í–û–Ø –†–û–õ–¨:
–¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–º–æ—â–Ω–∏–∫ - —Ç—ã —Å–æ–∞–≤—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π:
- –í–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å
- –ó–∞–¥–∞–µ—Ç –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
- –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –ø–æ–≤–æ—Ä–æ—Ç—ã —Å—é–∂–µ—Ç–∞
- –ü–æ–º–æ–≥–∞–µ—Ç —Å–æ–∑–¥–∞—Ç—å –≥–ª—É–±–æ–∫–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
- –†–∞–∑–≤–∏–≤–∞–µ—Ç –º–∏—Ä —á–µ—Ä–µ–∑ –¥–µ—Ç–∞–ª–∏ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É

–°–û–û–ë–©–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: "{user_message}"

–û–¢–í–ï–¢–¨:
1. –ü–æ–Ω—è–ª –ª–∏ —Ç—ã –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?
2. –ö–∞–∫–∏–µ –∏–¥–µ–∏/–≤–æ–ø—Ä–æ—Å—ã —É —Ç–µ–±—è –µ—Å—Ç—å?
3. –ß—Ç–æ –º–æ–∂–Ω–æ —Ä–∞–∑–≤–∏—Ç—å –¥–∞–ª—å—à–µ?
4. –ö–∞–∫–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å?

–ë—É–¥—å –∂–∏–≤—ã–º, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º. –ù–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–π - –≤–µ–¥–∏ –¥–∏–∞–ª–æ–≥."""
        
        return prompt
    
    def _parse_chat_response(self, response: str) -> Dict[str, Any]:
        """Parse AI chat response"""
        return {
            'message': response.strip()
        }
    
    def _get_fallback_chat_response(self, user_message: str) -> Dict[str, Any]:
        """Get fallback chat response when AI is unavailable"""
        fallback_responses = [
            f'*–ó–∞–¥—É–º—á–∏–≤–æ –ø–æ—á–µ—Å—ã–≤–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –±–æ—Ä–æ–¥—É*\n\n–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ... "{user_message}" - —ç—Ç–æ –∑–≤—É—á–∏—Ç –∫–∞–∫ –Ω–∞—á–∞–ª–æ —á–µ–≥–æ-—Ç–æ –±–æ–ª—å—à–µ–≥–æ. –í –º–∏—Ä–µ, –≥–¥–µ –∫–∞–∂–¥—ã–π –≤—ã–±–æ—Ä –∏–º–µ–µ—Ç –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è, —Ç–∞–∫–∏–µ –∏–¥–µ–∏ –º–æ–≥—É—Ç —Å—Ç–∞—Ç—å –æ—Å–Ω–æ–≤–æ–π –¥–ª—è —Ü–µ–ª–æ–π —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.\n\n–ß—Ç–æ –µ—Å–ª–∏ –º—ã —Ä–∞–∑–æ–≤—å–µ–º —ç—Ç–æ –¥–∞–ª—å—à–µ? –ö–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å —É –∏–≥—Ä–æ–∫–∞?',
            f'*–ü—Ä–∏—â—É—Ä–∏–≤–∞–µ—Ç—Å—è —Å –∏—Ä–æ–Ω–∏—á–Ω–æ–π —É–ª—ã–±–∫–æ–π*\n\n–ê—Ö, "{user_message}"... –ö–ª–∞—Å—Å–∏–∫–∞. –ù–æ –∑–Ω–∞–µ—à—å —á—Ç–æ? –í Disco Elysium –¥–∞–∂–µ —Å–∞–º—ã–µ –±–∞–Ω–∞–ª—å–Ω—ã–µ –≤–µ—â–∏ –º–æ–≥—É—Ç —Å—Ç–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –≥–ª—É–±–æ–∫–∏—Ö —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π.\n\n–î–∞–≤–∞–π –ø–æ–¥—É–º–∞–µ–º: –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –æ—Ç—Ä–∞–∑–∏—Ç—å—Å—è –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –º–∏—Ä–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞? –ö–∞–∫–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –º–æ–≥—É—Ç –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É —Å–∏—Ç—É–∞—Ü–∏—é?',
            f'*–ù–∞–∫–ª–æ–Ω—è–µ—Ç—Å—è –≤–ø–µ—Ä–µ–¥ —Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–º –≤–∏–¥–æ–º*\n\n"{user_message}" - –æ—Ç–ª–∏—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞! –ù–æ –ø–æ–º–Ω–∏: –º—ã —Å–æ–∑–¥–∞–µ–º –Ω–µ –ø—Ä–æ—Å—Ç–æ –∏—Å—Ç–æ—Ä–∏—é, –∞ —Ü–µ–ª—É—é –≤—Å–µ–ª–µ–Ω–Ω—É—é —á—É–≤—Å—Ç–≤ –∏ –º—ã—Å–ª–µ–π.\n\n–ö–∞–∫–∏–µ –º–æ—Ä–∞–ª—å–Ω—ã–µ –¥–∏–ª–µ–º–º—ã –∑–¥–µ—Å—å –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å? –ö–∞–∫ —ç—Ç–æ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –º–∏—Ä–æ–º?',
            f'*–ó–∞–¥—É–º—á–∏–≤–æ —Å–º–æ—Ç—Ä–∏—Ç –≤–¥–∞–ª—å*\n\n–•–º... "{user_message}". –í –º–∏—Ä–µ, –≥–¥–µ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –∏ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ –ø–µ—Ä–µ–ø–ª–µ—Ç–∞—é—Ç—Å—è, —Ç–∞–∫–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –º–æ–≥—É—Ç —Å—Ç–∞—Ç—å –æ—Å–Ω–æ–≤–æ–π –¥–ª—è —Ü–µ–ª–æ–π —Å–∏—Å—Ç–µ–º—ã —É–±–µ–∂–¥–µ–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.\n\n–ê —á—Ç–æ –µ—Å–ª–∏ –º—ã –¥–æ–±–∞–≤–∏–º —Å—é–¥–∞ –Ω–µ–º–Ω–æ–≥–æ —ç–∫–∑–∏—Å—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —É–∂–∞—Å–∞? –ò–ª–∏, –Ω–∞–æ–±–æ—Ä–æ—Ç, –Ω–∞–¥–µ–∂–¥—ã?'
        ]
        
        import random
        return {
            'message': random.choice(fallback_responses)
        }
    
    def _build_prompt(self, context: Dict[str, Any]) -> str:
        """Build AI prompt from context"""
        character = context.get('character', {})
        character_name = character.get('name', '–ì–µ—Ä–æ–π')
        
        # Build character stats string
        stats = character.get('stats', {})
        stats_str = ', '.join([f"{stat.get('name', key)}: {stat.get('value', 0)}" 
                              for key, stat in stats.items()])
        
        # Build character skills string (first 6)
        skills = character.get('skills', {})
        skills_str = ', '.join([f"{skill.get('name', key)}: {skill.get('value', 0)}" 
                               for key, skill in list(skills.items())[:6]])
        
        quest_theme = context.get('quest_theme', '–î–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ Disco Elysium')
        difficulty = context.get('difficulty', 'medium')
        current_step = context.get('current_step', 0)
        previous_choices = context.get('previous_choices', [])
        
        return f"""
–°–æ–∑–¥–∞–π —à–∞–≥ –∫–≤–µ—Å—Ç–∞ –≤ —Å—Ç–∏–ª–µ Disco Elysium –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ "{character_name}".

–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {stats_str}
–ù–∞–≤—ã–∫–∏: {skills_str}
–¢–µ–º–∞ –∫–≤–µ—Å—Ç–∞: {quest_theme}
–°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty}
–®–∞–≥: {current_step + 1}

–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã–±–æ—Ä—ã: {', '.join(previous_choices)}

–°–æ–∑–¥–∞–π –æ–¥–∏–Ω —à–∞–≥ –∫–≤–µ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
  "title": "–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–≥–∞",
  "description": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –≤ —Å—Ç–∏–ª–µ Disco Elysium",
  "choices": [
    {{
      "text": "–í–∞—Ä–∏–∞–Ω—Ç –≤—ã–±–æ—Ä–∞",
      "result": "–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–±–æ—Ä–∞",
      "statModifier": {{"stat": "–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å—Ç–∞—Ç–∞", "value": —á–∏—Å–ª–æ}}
    }}
  ]
}}

–í–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç–∞—Ç–æ–≤: logic, empathy, volition, endurance, perception, composure
–ó–Ω–∞—á–µ–Ω–∏—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤: –æ—Ç -2 –¥–æ +2
–°–æ–∑–¥–∞–π 3-4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤—ã–±–æ—Ä–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º.
        """.strip()
    
    def _call_openai(self, prompt: str) -> str:
        """Call OpenRouter API"""
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {self.api_key}',
        }
        
        data = {
            'model': self.model,
            'messages': [
                {
                    'role': 'system',
                    'content': '–¢—ã —Å–æ–∑–¥–∞–µ—à—å –∫–≤–µ—Å—Ç—ã –≤ —Å—Ç–∏–ª–µ Disco Elysium. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON.'
                },
                {
                    'role': 'user',
                    'content': prompt
                }
            ],
            'max_tokens': 1000,
            'temperature': 0.8,
        }
        
        print(f"üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫: {self.base_url}/chat/completions")
        print(f"üîç –ú–æ–¥–µ–ª—å: {self.model}")
        print(f"üîç –ü—Ä–æ–º–ø—Ç: {prompt[:100]}...")
        
        response = requests.post(f"{self.base_url}/chat/completions", headers=headers, json=data, timeout=30)
        
        print(f"üîç –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            content = result['choices'][0]['message']['content']
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {content[:100]}...")
            return content
        else:
            error_msg = f"API request failed: {response.status_code} - {response.text}"
            print(f"‚ùå {error_msg}")
            raise Exception(error_msg)
    
    def _call_chat_api(self, prompt: str) -> str:
        """Call OpenRouter API for chat responses"""
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {self.api_key}',
        }
        
        data = {
            'model': self.model,
            'messages': [
                {
                    'role': 'user',
                    'content': prompt
                }
            ],
            'max_tokens': 1000,
            'temperature': 0.7,
        }
        
        print(f"üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Ç-–∑–∞–ø—Ä–æ—Å –∫: {self.base_url}/chat/completions")
        print(f"üîç –ú–æ–¥–µ–ª—å: {self.model}")
        print(f"üîç –ü—Ä–æ–º–ø—Ç: {prompt[:100]}...")
        
        response = requests.post(f"{self.base_url}/chat/completions", headers=headers, json=data, timeout=30)
        
        print(f"üîç –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            content = result['choices'][0]['message']['content']
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —á–∞—Ç-–æ—Ç–≤–µ—Ç: {content[:100]}...")
            return content
        else:
            error_msg = f"Chat API request failed: {response.status_code} - {response.text}"
            print(f"‚ùå {error_msg}")
            raise Exception(error_msg)
    
    def _parse_response(self, response: str, step_index: int) -> Dict[str, Any]:
        """Parse AI response into quest step"""
        try:
            parsed = json.loads(response)
            return {
                'id': f'ai_step_{step_index}',
                'title': parsed.get('title', f'–®–∞–≥ {step_index + 1}'),
                'description': parsed.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ —à–∞–≥–∞'),
                'choices': [
                    {
                        'id': f'choice_{step_index}_{i}',
                        'text': choice.get('text', '–í—ã–±–æ—Ä'),
                        'result': choice.get('result', '–†–µ–∑—É–ª—å—Ç–∞—Ç'),
                        'statModifier': choice.get('statModifier')
                    }
                    for i, choice in enumerate(parsed.get('choices', []))
                ],
            }
        except (json.JSONDecodeError, KeyError) as e:
            print(f"Failed to parse AI response: {e}")
            return self._get_fallback_step(step_index)
    
    def _get_fallback_step(self, step_index: int) -> Dict[str, Any]:
        """Get fallback quest step when AI is unavailable"""
        fallback_steps = [
            {
                'id': 'fallback_start',
                'title': '–ù–∞—á–∞–ª–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è',
                'description': '–í—ã –ø—Ä–æ—Å—ã–ø–∞–µ—Ç–µ—Å—å –≤ —Ç–µ–º–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ. –ì–æ–ª–æ–≤–∞ –±–æ–ª–∏—Ç, –∏ –≤—ã –Ω–µ –ø–æ–º–Ω–∏—Ç–µ, –∫–∞–∫ —Å—é–¥–∞ –ø–æ–ø–∞–ª–∏. –í —É–≥–ª—É –∫–æ–º–Ω–∞—Ç—ã —Å—Ç–æ–∏—Ç –∑–∞–≥–∞–¥–æ—á–Ω–∞—è —Ñ–∏–≥—É—Ä–∞.',
                'choices': [
                    {
                        'id': 'approach',
                        'text': '–ü–æ–¥–æ–π—Ç–∏ –∫ —Ñ–∏–≥—É—Ä–µ',
                        'result': '–í—ã —Ä–µ—à–∞–µ—Ç–µ –ø–æ–¥–æ–π—Ç–∏ –±–ª–∏–∂–µ...',
                        'statModifier': {'stat': 'logic', 'value': 1}
                    },
                    {
                        'id': 'observe',
                        'text': '–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è',
                        'result': '–í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –∏–∑—É—á–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É...',
                        'statModifier': {'stat': 'perception', 'value': 1}
                    },
                    {
                        'id': 'shout',
                        'text': '–ö—Ä–∏–∫–Ω—É—Ç—å: "–ö—Ç–æ –∑–¥–µ—Å—å?!"',
                        'result': '–í–∞—à –≥–æ–ª–æ—Å —ç—Ö–æ–º –æ—Ç–¥–∞–µ—Ç—Å—è –ø–æ –∫–æ–º–Ω–∞—Ç–µ...',
                        'statModifier': {'stat': 'volition', 'value': 1}
                    }
                ]
            },
            {
                'id': 'fallback_second',
                'title': '–í—Å—Ç—Ä–µ—á–∞ —Å –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–µ–º',
                'description': '–§–∏–≥—É—Ä–∞ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –∫ –≤–∞–º. –≠—Ç–æ —á–µ–ª–æ–≤–µ–∫ –≤ –¥–ª–∏–Ω–Ω–æ–º –ø–ª–∞—â–µ, –ª–∏—Ü–æ —Å–∫—Ä—ã—Ç–æ –≤ —Ç–µ–Ω–∏. –û–Ω –ø—Ä–æ—Ç—è–≥–∏–≤–∞–µ—Ç —Ä—É–∫—É —Å –∫–∞–∫–∏–º-—Ç–æ –ø—Ä–µ–¥–º–µ—Ç–æ–º.',
                'choices': [
                    {
                        'id': 'take_item',
                        'text': '–í–∑—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç',
                        'result': '–í—ã –±–µ—Ä–µ—Ç–µ –ø—Ä–µ–¥–º–µ—Ç...',
                        'statModifier': {'stat': 'endurance', 'value': 1}
                    },
                    {
                        'id': 'ask_questions',
                        'text': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã',
                        'result': '–í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Ä–∞—Å—Å–ø—Ä–∞—à–∏–≤–∞—Ç—å...',
                        'statModifier': {'stat': 'empathy', 'value': 1}
                    },
                    {
                        'id': 'refuse',
                        'text': '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è',
                        'result': '–í—ã –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç–µ—Å—å...',
                        'statModifier': {'stat': 'composure', 'value': 1}
                    }
                ]
            },
            {
                'id': 'fallback_third',
                'title': '–û—Ç–∫—Ä–æ–≤–µ–Ω–∏–µ',
                'description': '–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü –æ–±—ä—è—Å–Ω—è–µ—Ç: "–¢—ã –≤ –º–∏—Ä–µ, –≥–¥–µ —Ç–≤–æ–∏ –º—ã—Å–ª–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é. –¢–≤–æ–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç, –∫–∞–∫ —Ç—ã –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—à—å —ç—Ç–æ—Ç –º–∏—Ä."',
                'choices': [
                    {
                        'id': 'accept',
                        'text': '–ü—Ä–∏–Ω—è—Ç—å —ç—Ç–æ –∫–∞–∫ –¥–∞–Ω–Ω–æ—Å—Ç—å',
                        'result': '–í—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –Ω–æ–≤—ã–π –º–∏—Ä –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.',
                        'statModifier': {'stat': 'logic', 'value': 2}
                    },
                    {
                        'id': 'question',
                        'text': '–ó–∞–¥–∞—Ç—å –±–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤',
                        'result': '–í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Ä–∞—Å—Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ –¥–µ—Ç–∞–ª—è—Ö...',
                        'statModifier': {'stat': 'empathy', 'value': 1}
                    },
                    {
                        'id': 'resist',
                        'text': '–°–æ–ø—Ä–æ—Ç–∏–≤–ª—è—Ç—å—Å—è —ç—Ç–æ–º—É',
                        'result': '–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –Ω–∞–π—Ç–∏ –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ...',
                        'statModifier': {'stat': 'volition', 'value': 2}
                    }
                ]
            }
        ]
        
        return fallback_steps[step_index % len(fallback_steps)]


# Global instance
quest_generator = QuestGenerator()
