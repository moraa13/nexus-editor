"""
AI Views for Nexus - Enhanced AI chat endpoints
"""
import openai
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from rest_framework.permissions import AllowAny
from django.conf import settings
from django.utils import timezone
import logging

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI –¥–ª—è –≤–µ—Ä—Å–∏–∏ 0.28.1
openai.api_key = getattr(settings, 'OPENAI_API_KEY', None)


class AIChatView(APIView):
    """
    Enhanced AI Chat endpoint with Disco Elysium style responses
    POST /api/ai/chat/
    """
    permission_classes = [AllowAny]
    
    def post(self, request):
        """
        Handle AI chat requests with enhanced context and error handling
        
        Request body:
        {
            "message": "–ü–æ–º–æ–≥–∏ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
            "context": {
                "genre": "noir",
                "tone": "dark-noir",
                "project_name": "–ú–æ–π –ø—Ä–æ–µ–∫—Ç"
            }
        }
        
        Response:
        {
            "reply": "AI response",
            "success": true,
            "model": "gpt-3.5-turbo",
            "context_used": {...}
        }
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            user_message = request.data.get('message')
            context = request.data.get('context', {})
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if not user_message:
                return Response(
                    {'error': 'Message is required'}, 
                    status=status.HTTP_400_BAD_REQUEST
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
            if not openai.api_key:
                logger.warning("OpenAI API key not configured")
                return Response(
                    {
                        'reply': self._get_fallback_response(user_message, context),
                        'success': False,
                        'model': 'fallback',
                        'context_used': context,
                        'warning': 'OpenAI API key not configured, using fallback response'
                    },
                    status=status.HTTP_200_OK
                )
            
            # –°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            prompt = self._build_prompt(user_message, context)
            
            # –í—ã–∑—ã–≤–∞–µ–º OpenAI API
            completion = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {
                        "role": "system", 
                        "content": self._get_system_prompt(context)
                    },
                    {
                        "role": "user", 
                        "content": prompt
                    }
                ],
                max_tokens=500,
                temperature=0.7,
                top_p=0.9
            )
            
            ai_reply = completion['choices'][0]['message']['content']
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            logger.info(f"AI chat request processed successfully. Tokens used: {completion.get('usage', {}).get('total_tokens', 0)}")
            
            return Response({
                'reply': ai_reply,
                'success': True,
                'model': 'gpt-3.5-turbo',
                'context_used': context,
                'tokens_used': completion.get('usage', {}).get('total_tokens', 0),
                'created_at': timezone.now().isoformat()
            }, status=status.HTTP_200_OK)
            
        except openai.error.RateLimitError:
            logger.error("OpenAI rate limit exceeded")
            return Response(
                {
                    'reply': '–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.',
                    'success': False,
                    'error': 'Rate limit exceeded'
                },
                status=status.HTTP_429_TOO_MANY_REQUESTS
            )
            
        except openai.error.AuthenticationError:
            logger.error("OpenAI authentication failed")
            return Response(
                {
                    'reply': '–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π AI —Å–µ—Ä–≤–∏—Å–∞.',
                    'success': False,
                    'error': 'Authentication failed'
                },
                status=status.HTTP_401_UNAUTHORIZED
            )
            
        except Exception as e:
            logger.error(f"AI chat error: {str(e)}")
            return Response(
                {
                    'reply': self._get_fallback_response(user_message, context),
                    'success': False,
                    'error': str(e),
                    'model': 'fallback'
                },
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )
    
    def _get_system_prompt(self, context):
        """–°–æ–∑–¥–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        genre = context.get('genre', 'noir')
        tone = context.get('tone', 'dark-noir')
        project_name = context.get('project_name', '–≤–∞—à –ø—Ä–æ–µ–∫—Ç')
        
        # –°—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        style_instructions = {
            'dark-noir': '–û—Ç–≤–µ—á–∞–π –≤ —Å—Ç–∏–ª–µ —Ç–µ–º–Ω–æ–≥–æ –Ω—É–∞—Ä–∞: –º—Ä–∞—á–Ω–æ, –∏—Ä–æ–Ω–∏—á–Ω–æ, —Å —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–º–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º–∏ –æ –ø—Ä–∏—Ä–æ–¥–µ —á–µ–ª–æ–≤–µ–∫–∞.',
            'philosophical': '–û—Ç–≤–µ—á–∞–π –∫–∞–∫ —Ñ–∏–ª–æ—Å–æ—Ñ-–Ω–∞—Ä—Ä–∞—Ç–æ—Ä: –≥–ª—É–±–æ–∫–æ, —Ä–∞–∑–º—ã—à–ª—è—è –æ —Å–º—ã—Å–ª–µ –∏ —Å—É—Ç–∏ –≤–µ—â–µ–π.',
            'satirical': '–û—Ç–≤–µ—á–∞–π —Å —Å–∞—Ä–∫–∞–∑–º–æ–º –∏ –æ—Å—Ç—Ä–æ—É–º–∏–µ–º: –∫—Ä–∏—Ç–∏—á–Ω–æ, –Ω–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ.',
            'melancholic': '–û—Ç–≤–µ—á–∞–π –º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω–æ: –≥—Ä—É—Å—Ç–Ω–æ, –Ω–æ –∫—Ä–∞—Å–∏–≤–æ, —Å –Ω–æ—Å—Ç–∞–ª—å–≥–∏–µ–π.',
            'energetic': '–û—Ç–≤–µ—á–∞–π —ç–Ω–µ—Ä–≥–∏—á–Ω–æ: –¥–∏–Ω–∞–º–∏—á–Ω–æ, —Å —ç–Ω—Ç—É–∑–∏–∞–∑–º–æ–º –∏ –¥—Ä–∞–π–≤–æ–º.',
            'mystical': '–û—Ç–≤–µ—á–∞–π –∑–∞–≥–∞–¥–æ—á–Ω–æ: —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –º–∏—Å—Ç–∏–∫–∏ –∏ —Ç–∞–π–Ω—ã.',
            'cyberpunk': '–û—Ç–≤–µ—á–∞–π –≤ —Å—Ç–∏–ª–µ –∫–∏–±–µ—Ä–ø–∞–Ω–∫–∞: —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–æ, —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∞–Ω—Ç–∏—É—Ç–æ–ø–∏–∏.'
        }
        
        style_instruction = style_instructions.get(tone, style_instructions['dark-noir'])
        
        return f"""–¢—ã ‚Äî –ò–ò-—Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –≤ –¥—É—Ö–µ Disco Elysium. –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –≥–ª—É–±–æ–∫–∏–µ, —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –∏–≥—Ä—ã —Å –º–æ—Ä–∞–ª—å–Ω—ã–º–∏ –¥–∏–ª–µ–º–º–∞–º–∏ –∏ —Å–ª–æ–∂–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏.

üéÆ –ü—Ä–æ–µ–∫—Ç: {project_name}
üé≠ –ñ–∞–Ω—Ä: {genre}
üé® –°—Ç–∏–ª—å: {style_instruction}

üìù –¢–≤–æ—è —Ä–æ–ª—å:
- –ü–æ–º–æ–≥–∞—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å –≥–ª—É–±–∏–Ω–æ–π
- –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –º–æ—Ä–∞–ª—å–Ω—ã–µ –¥–∏–ª–µ–º–º—ã –∏ —Å–ª–æ–∂–Ω—ã–µ –≤—ã–±–æ—Ä—ã
- –°–æ–∑–¥–∞–≤–∞—Ç—å –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ —Å—Ü–µ–Ω—ã –∏ –¥–∏–∞–ª–æ–≥–∏
- –†–∞–∑–≤–∏–≤–∞—Ç—å —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ —Ç–µ–º—ã –≤ –∏–≥—Ä–æ–≤–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å—Ç–∏–ª—å Disco Elysium: –∏—Ä–æ–Ω–∏—è, –≥–ª—É–±–∏–Ω–∞, —á–µ–ª–æ–≤–µ—á–Ω–æ—Å—Ç—å

üîß –ü—Ä–∞–≤–∏–ª–∞:
- –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º, –Ω–æ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º
- –ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
- –£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏–≥—Ä—ã

–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å —Å–æ–∑–¥–∞—Ç—å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –∏–≥—Ä—É."""
    
    def _build_prompt(self, user_message, context):
        """–°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        project_name = context.get('project_name', '–≤–∞—à –ø—Ä–æ–µ–∫—Ç')
        genre = context.get('genre', '–∏–≥—Ä–∞')
        
        return f"""–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º "{project_name}" –≤ –∂–∞–Ω—Ä–µ {genre}.

–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message}

–ü–æ–º–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–º, —É—á–∏—Ç—ã–≤–∞—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å—Ç–∏–ª—å Disco Elysium."""
    
    def _get_fallback_response(self, user_message, context):
        """Fallback –æ—Ç–≤–µ—Ç—ã –∫–æ–≥–¥–∞ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        project_name = context.get('project_name', '–≤–∞—à –ø—Ä–æ–µ–∫—Ç')
        genre = context.get('genre', '–∏–≥—Ä–∞')
        
        fallback_responses = [
            f"–ü–æ–Ω—è–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: \"{user_message}\". –ö–∞–∫ –ò–ò-—Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç, —è –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é {genre} –¥–ª—è {project_name}. –ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∏–¥–µ—è! \"{user_message}\" ‚Äî —ç—Ç–æ —Ö–æ—Ä–æ—à–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è {project_name}. –î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º –¥–µ—Ç–∞–ª–∏.",
            f"–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ {genre} –∏–≥—Ä—ã \"{user_message}\" –º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å –º–Ω–æ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –±–æ–ª—å—à–µ –æ –≤–∞—à–µ–º –≤–∏–¥–µ–Ω–∏–∏.",
            f"–ü–æ–Ω—è–ª! \"{user_message}\" ‚Äî –≤–∞–∂–Ω—ã–π –∞—Å–ø–µ–∫—Ç –¥–ª—è {project_name}. –ö–∞–∫ –ò–ò-—Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç, —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π —ç—Ç–æ–π –∏–¥–µ–∏."
        ]
        
        import random
        return random.choice(fallback_responses)


class AIContentGenerationView(APIView):
    """
    AI Content Generation endpoint
    POST /api/ai/generate-content/
    """
    permission_classes = [AllowAny]
    
    def post(self, request):
        """
        Generate specific content using AI
        
        Request body:
        {
            "content_type": "dialogue",
            "prompt": "–°–æ–∑–¥–∞–π –¥–∏–∞–ª–æ–≥ –º–µ–∂–¥—É –¥–µ—Ç–µ–∫—Ç–∏–≤–æ–º –∏ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã–º",
            "context": {...}
        }
        """
        try:
            content_type = request.data.get('content_type', 'dialogue')
            prompt = request.data.get('prompt', '')
            context = request.data.get('context', {})
            
            if not prompt:
                return Response(
                    {'error': 'Prompt is required'}, 
                    status=status.HTTP_400_BAD_REQUEST
                )
            
            if not openai.api_key:
                return Response(
                    {
                        'content': self._get_fallback_content(content_type, prompt),
                        'success': False,
                        'model': 'fallback'
                    },
                    status=status.HTTP_200_OK
                )
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            system_prompts = {
                'dialogue': f"""–¢—ã —Å–æ–∑–¥–∞–µ—à—å –¥–∏–∞–ª–æ–≥–∏ –¥–ª—è –∏–≥—Ä—ã –≤ —Å—Ç–∏–ª–µ Disco Elysium.
                
–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}

–°–æ–∑–¥–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, –∂–∏–≤–æ–π –¥–∏–∞–ª–æ–≥ —Å:
- –£–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –≥–æ–ª–æ—Å–∞–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–∫—Ä–∞—Å–∫–æ–π
- –ü–æ–¥—Ç–µ–∫—Å—Ç–æ–º –∏ —Å–∫—Ä—ã—Ç—ã–º–∏ –º–æ—Ç–∏–≤–∞–º–∏
- –í–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∏–≥—Ä–æ–∫–∞""",
                
                'character': f"""–¢—ã —Å–æ–∑–¥–∞–µ—à—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –∏–≥—Ä—ã –≤ —Å—Ç–∏–ª–µ Disco Elysium.
                
–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}

–°–æ–∑–¥–∞–π –≥–ª—É–±–æ–∫–æ–≥–æ, –º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å:
- –£–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —á–µ—Ä—Ç–∞–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
- –ú–æ—Ç–∏–≤–∞—Ü–∏—è–º–∏ –∏ —Ü–µ–ª—è–º–∏
- –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∞–º–∏ –∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è–º–∏
- –û—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏ —Å –¥—Ä—É–≥–∏–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏""",
                
                'quest': f"""–¢—ã —Å–æ–∑–¥–∞–µ—à—å –∫–≤–µ—Å—Ç—ã –¥–ª—è –∏–≥—Ä—ã –≤ —Å—Ç–∏–ª–µ Disco Elysium.
                
–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}

–°–æ–∑–¥–∞–π —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫–≤–µ—Å—Ç —Å:
- –ú–æ—Ä–∞–ª—å–Ω—ã–º–∏ –¥–∏–ª–µ–º–º–∞–º–∏
- –ù–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—É—Ç—è–º–∏ —Ä–µ—à–µ–Ω–∏—è
- –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º–∏ –≤—ã–±–æ—Ä–æ–≤
- –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏""",
                
                'scene': f"""–¢—ã —Å–æ–∑–¥–∞–µ—à—å —Å—Ü–µ–Ω—ã –¥–ª—è –∏–≥—Ä—ã –≤ —Å—Ç–∏–ª–µ Disco Elysium.
                
–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}

–°–æ–∑–¥–∞–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—É—é —Å—Ü–µ–Ω—É —Å:
- –î–µ—Ç–∞–ª—å–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–∫—Ä–∞—Å–∫–æ–π
- –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
- –í–∏–∑—É–∞–ª—å–Ω—ã–º–∏ –æ–±—Ä–∞–∑–∞–º–∏"""
            }
            
            system_prompt = system_prompts.get(content_type, system_prompts['dialogue'])
            
            completion = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=800,
                temperature=0.8
            )
            
            content = completion['choices'][0]['message']['content']
            
            return Response({
                'content': content,
                'content_type': content_type,
                'success': True,
                'model': 'gpt-3.5-turbo',
                'tokens_used': completion.get('usage', {}).get('total_tokens', 0)
            }, status=status.HTTP_200_OK)
            
        except Exception as e:
            logger.error(f"Content generation error: {str(e)}")
            return Response(
                {
                    'content': self._get_fallback_content(content_type, prompt),
                    'success': False,
                    'error': str(e),
                    'model': 'fallback'
                },
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )
    
    def _get_fallback_content(self, content_type, prompt):
        """Fallback –∫–æ–Ω—Ç–µ–Ω—Ç –∫–æ–≥–¥–∞ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        fallback_content = {
            'dialogue': f"–î–∏–∞–ª–æ–≥ –Ω–∞ —Ç–µ–º—É: {prompt}\n\n[–ü–µ—Ä—Å–æ–Ω–∞–∂]: –≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è.\n[–ò–≥—Ä–æ–∫]: –î–∞, —è —Å–æ–≥–ª–∞—Å–µ–Ω.\n[–ü–µ—Ä—Å–æ–Ω–∞–∂]: –ß—Ç–æ –≤—ã –¥—É–º–∞–µ—Ç–µ –æ–± —ç—Ç–æ–º?",
            'character': f"–ü–µ—Ä—Å–æ–Ω–∞–∂: {prompt}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —á–µ—Ä—Ç–∞–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞.\n–ú–æ—Ç–∏–≤–∞—Ü–∏—è: –ò–º–µ–µ—Ç —Å–≤–æ–∏ —Ü–µ–ª–∏ –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏—è.\n–û—Ç–Ω–æ—à–µ–Ω–∏—è: –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –¥—Ä—É–≥–∏–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏.",
            'quest': f"–ö–≤–µ—Å—Ç: {prompt}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: –£–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞.\n–¶–µ–ª—å: –î–æ—Å—Ç–∏—á—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.\n–ù–∞–≥—Ä–∞–¥–∞: –ü–æ–ª—É—á–∏—Ç—å —á—Ç–æ-—Ç–æ —Ü–µ–Ω–Ω–æ–µ.",
            'scene': f"–°—Ü–µ–Ω–∞: {prompt}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏.\n–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: –°–æ–∑–¥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.\n–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞."
        }
        
        return fallback_content.get(content_type, f"–ö–æ–Ω—Ç–µ–Ω—Ç: {prompt}")


class AIStatusView(APIView):
    """
    AI Service Status endpoint
    GET /api/ai/status/
    """
    permission_classes = [AllowAny]
    
    def get(self, request):
        """Get AI service status"""
        try:
            is_configured = bool(openai.api_key)
            
            return Response({
                'available': is_configured,
                'model': 'gpt-3.5-turbo',
                'api_configured': is_configured,
                'fallback_mode': not is_configured,
                'service': 'OpenAI'
            }, status=status.HTTP_200_OK)
            
        except Exception as e:
            logger.error(f"AI status error: {str(e)}")
            return Response(
                {'error': str(e)},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )
