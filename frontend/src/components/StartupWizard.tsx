import React, { useState } from 'react';
import Button from './ui/Button';
import Input from './ui/Input';
import Card from './ui/Card';

interface StartupWizardProps {
  onComplete: (projectData: ProjectData) => void;
}

interface ProjectData {
  name: string;
  genre: string;
  setting: string;
  tone: string;
  description: string;
}

const GENRES = [
  { value: 'noir', label: '–ù—É–∞—Ä', description: '–¢–µ–º–Ω—ã–µ —É–ª–∏—Ü—ã, –º–æ—Ä–∞–ª—å–Ω—ã–µ –¥–∏–ª–µ–º–º—ã' },
  { value: 'cyberpunk', label: '–ö–∏–±–µ—Ä–ø–∞–Ω–∫', description: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏' },
  { value: 'fantasy', label: '–§—ç–Ω—Ç–µ–∑–∏', description: '–ú–∞–≥–∏—è –∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è' },
  { value: 'sci-fi', label: '–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', description: '–ö–æ—Å–º–æ—Å –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' },
  { value: 'horror', label: '–•–æ—Ä—Ä–æ—Ä', description: '–£–∂–∞—Å –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ' },
  { value: 'drama', label: '–î—Ä–∞–º–∞', description: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏' }
];

const TONES = [
  { value: 'dark-noir', label: '–¢–µ–º–Ω—ã–π –Ω—É–∞—Ä', description: '–ú—Ä–∞—á–Ω—ã–π, –∏—Ä–æ–Ω–∏—á–Ω—ã–π' },
  { value: 'philosophical', label: '–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π', description: '–ì–ª—É–±–æ–∫–∏–π, —Ä–∞–∑–º—ã—à–ª—è—é—â–∏–π' },
  { value: 'satirical', label: '–°–∞—Ç–∏—Ä–∏—á–µ—Å–∫–∏–π', description: '–û—Å—Ç—Ä–æ—É–º–Ω—ã–π, –∫—Ä–∏—Ç–∏—á–Ω—ã–π' },
  { value: 'melancholic', label: '–ú–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω—ã–π', description: '–ì—Ä—É—Å—Ç–Ω—ã–π, –Ω–æ—Å—Ç–∞–ª—å–≥–∏—á–µ—Å–∫–∏–π' },
  { value: 'energetic', label: '–≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π', description: '–î–∏–Ω–∞–º–∏—á–Ω—ã–π, –∞–∫—Ç–∏–≤–Ω—ã–π' }
];

export default function StartupWizard({ onComplete }: StartupWizardProps) {
  const [step, setStep] = useState(1);
  const [creationMode, setCreationMode] = useState<'wizard' | 'parser'>('wizard');
  const [projectData, setProjectData] = useState<ProjectData>({
    name: '',
    genre: '',
    setting: '',
    tone: '',
    description: ''
  });

  const handleNext = () => {
    if (step < 5) {
      setStep(step + 1);
    }
  };

  const handleBack = () => {
    if (step > 1) {
      setStep(step - 1);
    }
  };

  const handleComplete = () => {
    onComplete(projectData);
  };

  const updateProjectData = (field: keyof ProjectData, value: string) => {
    setProjectData(prev => ({ ...prev, [field]: value }));
  };


  const renderStep = () => {
    switch (step) {
      case 1:
        return (
          <div className="space-y-6">
            <div className="text-center">
              <h2 className="text-3xl font-bold text-white mb-4">–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞</h2>
              <p className="text-[#B9BBBE] text-lg">
                –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—à–µ–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –Ω–æ–≤–µ–ª–ª—ã
              </p>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card 
                variant="elevated" 
                className={`text-center cursor-pointer transition-all duration-200 ${
                  creationMode === 'wizard' ? 'ring-2 ring-[#5865F2] bg-[#2F3136]' : 'hover:bg-[#2F3136]'
                }`}
                onClick={() => setCreationMode('wizard')}
              >
                <div className="space-y-4">
                  <div className="w-16 h-16 bg-[#5865F2] rounded-full flex items-center justify-center mx-auto">
                    <span className="text-2xl">‚ö°</span>
                  </div>
                  <h3 className="text-lg font-semibold text-white">–ü–æ—à–∞–≥–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä</h3>
                  <p className="text-[#B9BBBE] text-sm">
                    5 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
                  </p>
                </div>
              </Card>

              <Card 
                variant="elevated" 
                className={`text-center cursor-pointer transition-all duration-200 ${
                  creationMode === 'parser' ? 'ring-2 ring-[#5865F2] bg-[#2F3136]' : 'hover:bg-[#2F3136]'
                }`}
                onClick={() => setCreationMode('parser')}
              >
                <div className="space-y-4">
                  <div className="w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center mx-auto">
                    <span className="text-2xl">ü§ñ</span>
                  </div>
                  <h3 className="text-lg font-semibold text-white">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º</h3>
                  <p className="text-[#B9BBBE] text-sm">
                    –û–ø–∏—à–∏—Ç–µ –∏–≥—Ä—É - —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞—Å—Ç –ø—Ä–æ–µ–∫—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                  </p>
                </div>
              </Card>
            </div>
          </div>
        );

      case 2:
        return (
          <div className="space-y-6">
            <div className="text-center">
              <h2 className="text-2xl font-bold text-white mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</h2>
              <p className="text-[#B9BBBE]">–î–∞–π—Ç–µ –∏–º—è –≤–∞—à–µ–º—É –º–∏—Ä—É</p>
            </div>
            
            <Input
              label="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"
              value={projectData.name}
              onChange={(e) => updateProjectData('name', e.target.value)}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: '–¢–µ–Ω–∏ –†–µ–≤–∞–∫–æ–ª–∏' –∏–ª–∏ '–ö–∏–±–µ—Ä-–î–µ—Ç–µ–∫—Ç–∏–≤ 2077'"
              className="text-lg"
            />
          </div>
        );

      case 3:
        return (
          <div className="space-y-6">
            <div className="text-center">
              <h2 className="text-2xl font-bold text-white mb-2">–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä</h2>
              <p className="text-[#B9BBBE]">–ö–∞–∫–æ–π —Å—Ç–∏–ª—å –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?</p>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {GENRES.map((genre) => (
                <button
                  key={genre.value}
                  onClick={() => updateProjectData('genre', genre.value)}
                  className={`p-4 rounded-lg border-2 transition-all duration-200 text-left ${
                    projectData.genre === genre.value
                      ? 'border-[#5865F2] bg-[#5865F2]/10'
                      : 'border-[#40444B] hover:border-[#5865F2]/50'
                  }`}
                >
                  <h3 className="font-semibold text-white mb-1">{genre.label}</h3>
                  <p className="text-sm text-[#B9BBBE]">{genre.description}</p>
                </button>
              ))}
            </div>
          </div>
        );

      case 4:
        return (
          <div className="space-y-6">
            <div className="text-center">
              <h2 className="text-2xl font-bold text-white mb-2">–°–µ—Ç—Ç–∏–Ω–≥</h2>
              <p className="text-[#B9BBBE]">–ì–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–µ–π—Å—Ç–≤–∏–µ?</p>
            </div>
            
            <div className="space-y-4">
              <Input
                label="–û–ø–∏—Å–∞–Ω–∏–µ –º–∏—Ä–∞"
                value={projectData.setting}
                onChange={(e) => updateProjectData('setting', e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: '–ù–µ–æ–Ω–æ–≤—ã–µ —É–ª–∏—Ü—ã –±—É–¥—É—â–µ–≥–æ' –∏–ª–∏ '–°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—ã–π –≥–æ—Ä–æ–¥'"
                className="text-lg"
              />
              
              <div className="text-center">
                <Button 
                  variant="secondary" 
                  onClick={() => {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω–∏-–ø–∞—Ä—Å–µ—Ä –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
                    const description = prompt("–û–ø–∏—à–∏—Ç–µ –≤–∞—à –º–∏—Ä –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö:");
                    if (description) {
                      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å API –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
                      updateProjectData('setting', description);
                    }
                  }}
                  className="text-sm"
                >
                  ‚ú® –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–∏—Ç—å
                </Button>
              </div>
            </div>
          </div>
        );

      case 5:
        return (
          <div className="space-y-6">
            <div className="text-center">
              <h2 className="text-2xl font-bold text-white mb-2">–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å</h2>
              <p className="text-[#B9BBBE]">–ö–∞–∫–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –±—É–¥–µ—Ç —É –∏—Å—Ç–æ—Ä–∏–∏?</p>
            </div>
            
            <div className="space-y-3">
              {TONES.map((tone) => (
                <button
                  key={tone.value}
                  onClick={() => updateProjectData('tone', tone.value)}
                  className={`w-full p-4 rounded-lg border-2 transition-all duration-200 text-left ${
                    projectData.tone === tone.value
                      ? 'border-[#5865F2] bg-[#5865F2]/10'
                      : 'border-[#40444B] hover:border-[#5865F2]/50'
                  }`}
                >
                  <h3 className="font-semibold text-white mb-1">{tone.label}</h3>
                  <p className="text-sm text-[#B9BBBE]">{tone.description}</p>
                </button>
              ))}
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  const canProceed = () => {
    switch (step) {
      case 2: return projectData.name.trim().length > 0;
      case 3: return projectData.genre.length > 0;
      case 4: return projectData.setting.trim().length > 0;
      case 5: return projectData.tone.length > 0;
      default: return true;
    }
  };

  // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º –ø–∞—Ä—Å–µ—Ä–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ–æ—Ä–º—É
  if (creationMode === 'parser') {
    return (
      <div className="min-h-screen bg-[#36393F] flex items-center justify-center p-4">
        <div className="w-full max-w-2xl">
          <div className="text-center mb-8">
            <h2 className="text-3xl font-bold text-white mb-4">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</h2>
            <p className="text-[#B9BBBE] text-lg">
              –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∏–≥—Ä—É - —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç –ø—Ä–æ–µ–∫—Ç
            </p>
          </div>
          
          <Card variant="elevated" padding="lg">
            <div className="space-y-6">
              <div>
                <label className="block text-white font-medium mb-2">
                  –û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã
                </label>
                <textarea
                  value={projectData.description}
                  onChange={(e) => updateProjectData('description', e.target.value)}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: '–≠—Ç–æ –∫–∏–±–µ—Ä–ø–∞–Ω–∫-–∏–≥—Ä–∞ –ø—Ä–æ –¥–µ—Ç–µ–∫—Ç–∏–≤–∞ –≤ –Ω–µ–æ–Ω–æ–≤–æ–º –≥–æ—Ä–æ–¥–µ. –ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π - –±—ã–≤—à–∏–π –ø–æ–ª–∏—Ü–µ–π—Å–∫–∏–π, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—Å–ª–µ–¥—É–µ—Ç —Å–µ—Ä–∏—é —É–±–∏–π—Å—Ç–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—è–º–∏...'"
                  className="w-full h-32 p-4 bg-[#2F3136] border border-[#40444B] rounded-lg text-white placeholder-[#B9BBBE] focus:border-[#5865F2] focus:outline-none resize-none"
                />
              </div>
              
              <div className="text-center">
                <Button
                  variant="primary"
                  onClick={handleComplete}
                  disabled={!projectData.description.trim()}
                >
                  ‚ú® –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
                </Button>
              </div>
            </div>
          </Card>
          
          <div className="text-center mt-6">
            <Button
              variant="ghost"
              onClick={() => setCreationMode('wizard')}
            >
              ‚Üê –ü–æ—à–∞–≥–æ–≤—ã–π —Ä–µ–∂–∏–º
            </Button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-[#36393F] flex items-center justify-center p-4">
      <div className="w-full max-w-2xl">
        {/* Progress Bar */}
        <div className="mb-8">
          <div className="flex justify-between text-sm text-[#B9BBBE] mb-2">
            <span>–®–∞–≥ {step} –∏–∑ 5</span>
            <span>{Math.round((step / 5) * 100)}%</span>
          </div>
          <div className="w-full bg-[#40444B] rounded-full h-2">
            <div 
              className="bg-[#5865F2] h-2 rounded-full transition-all duration-300"
              style={{ width: `${(step / 5) * 100}%` }}
            />
          </div>
        </div>

        {/* Content */}
        <Card variant="elevated" padding="lg">
          {renderStep()}
        </Card>

        {/* Navigation */}
        <div className="flex justify-between mt-6">
          <Button
            variant="ghost"
            onClick={handleBack}
            disabled={step === 1}
          >
            –ù–∞–∑–∞–¥
          </Button>
          
          {step < 5 ? (
            <Button
              variant="primary"
              onClick={handleNext}
              disabled={!canProceed()}
            >
              –î–∞–ª–µ–µ
            </Button>
          ) : (
            <Button
              variant="success"
              onClick={handleComplete}
              disabled={!canProceed()}
            >
              –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
            </Button>
          )}
        </div>
      </div>
    </div>
  );
}
