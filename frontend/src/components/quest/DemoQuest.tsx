import { useState, useEffect } from 'react';
import type { DiscoElysiumCharacter } from '../../types/discoElysium';
import { questApiService, type QuestStep as AIStep, type QuestContext } from '../../services/questApi';

interface DemoQuestProps {
  character?: DiscoElysiumCharacter | null;
  onClose: () => void;
}

interface QuestChoice {
  id: string;
  text: string;
  result: string;
  statModifier?: { stat: string; value: number };
}

export default function DemoQuest({ character, onClose }: DemoQuestProps) {
  const [currentStep, setCurrentStep] = useState(0);
  const [isGenerating, setIsGenerating] = useState(false);
  const [questSteps, setQuestSteps] = useState<AIStep[]>([]);
  const [characterState, setCharacterState] = useState(character || {
    name: '–î–µ–º–æ –ü–µ—Ä—Å–æ–Ω–∞–∂',
    level: 1,
    stats: {
      intellect: { name: '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç', value: 4 },
      psyche: { name: '–ü—Å–∏—Ö–∏–∫–∞', value: 4 },
      physique: { name: '–§–∏–∑–∏–∫–∞', value: 4 },
      motorics: { name: '–ú–æ—Ç–æ—Ä–∏–∫–∞', value: 4 }
    },
    skills: {
      logic: { name: '–õ–æ–≥–∏–∫–∞', value: 2 },
      encyclopedia: { name: '–≠–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—è', value: 2 },
      rhetoric: { name: '–†–∏—Ç–æ—Ä–∏–∫–∞', value: 2 },
      drama: { name: '–î—Ä–∞–º–∞', value: 2 },
      conceptualization: { name: '–ö–æ–Ω—Ü–µ–ø—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è', value: 2 },
      visual_calculus: { name: '–í–∏–∑—É–∞–ª—å–Ω–æ–µ –∏—Å—á–∏—Å–ª–µ–Ω–∏–µ', value: 2 },
      volition: { name: '–í–æ–ª—è', value: 2 },
      inland_empire: { name: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∏–º–ø–µ—Ä–∏—è', value: 2 },
      empathy: { name: '–≠–º–ø–∞—Ç–∏—è', value: 2 },
      authority: { name: '–ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç', value: 2 },
      suggestion: { name: '–í–Ω—É—à–µ–Ω–∏–µ', value: 2 },
      espirit_de_corps: { name: '–î—É—Ö –∫–æ—Ä–ø—É—Å–∞', value: 2 },
      endurance: { name: '–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å', value: 2 },
      pain_threshold: { name: '–ü–æ—Ä–æ–≥ –±–æ–ª–∏', value: 2 },
      physical_instrument: { name: '–§–∏–∑–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç', value: 2 },
      electrochemistry: { name: '–≠–ª–µ–∫—Ç—Ä–æ—Ö–∏–º–∏—è', value: 2 },
      shivers: { name: '–î—Ä–æ–∂—å', value: 2 },
      half_light: { name: '–ü–æ–ª—É—Å–≤–µ—Ç', value: 2 },
      hand_eye_coordination: { name: '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Ä—É–∫ –∏ –≥–ª–∞–∑', value: 2 },
      perception: { name: '–í–æ—Å–ø—Ä–∏—è—Ç–∏–µ', value: 2 },
      reaction_speed: { name: '–°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏', value: 2 },
      savoir_faire: { name: '–°–∞–º–æ–æ–±–ª–∞–¥–∞–Ω–∏–µ', value: 2 },
      interfacing: { name: '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å', value: 2 },
      composure: { name: '–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ', value: 2 }
    }
  });

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–≤–µ—Å—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    generateQuest();
  }, []);

  const generateQuest = async () => {
    setIsGenerating(true);
    try {
      const context: QuestContext = {
        character: characterState,
        currentStep: 0,
        previousChoices: [],
        questTheme: '–î–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ Disco Elysium',
        difficulty: 'medium'
      };

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 2 —à–∞–≥–∞ –¥–ª—è –¥–µ–º–æ
      const steps = await questApiService.generateFullQuest(context, 2);
      setQuestSteps(steps);
    } catch (error) {
      console.error('Failed to generate quest:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleChoice = (choice: QuestChoice) => {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
    if (choice.statModifier && characterState.stats) {
      const newStats = { ...characterState.stats };
      const statName = choice.statModifier.stat;
      if (newStats[statName]) {
        newStats[statName].value = Math.min(10, Math.max(0, newStats[statName].value + choice.statModifier.value));
      }
      setCharacterState({
        ...characterState,
        stats: newStats
      });
    }

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    if (currentStep < questSteps.length - 1) {
      setCurrentStep(currentStep + 1);
    }
  };

  const getStatValue = (statName: string): number => {
    return characterState.stats?.[statName]?.value || 0;
  };

  const canMakeChoice = (choice: QuestChoice): boolean => {
    if (!choice.statModifier) return true;
    
    const currentValue = getStatValue(choice.statModifier.stat);
    return currentValue >= (choice.statModifier.value || 0);
  };

  const currentStepData = questSteps[currentStep];
  const isLastStep = currentStep === questSteps.length - 1;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-gray-800 rounded-xl border border-gray-600 shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="bg-gradient-to-r from-purple-600 to-indigo-600 px-6 py-4 rounded-t-xl border-b border-gray-600">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-white/20 rounded-lg flex items-center justify-center">
                <span className="text-2xl">üé≠</span>
              </div>
              <div>
                <h2 className="text-xl font-bold text-white">AI –î–µ–º–æ-–∫–≤–µ—Å—Ç</h2>
                <p className="text-purple-200 text-sm">–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {characterState.name}</p>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <button
                onClick={generateQuest}
                disabled={isGenerating}
                className="px-3 py-1 bg-white/20 hover:bg-white/30 disabled:bg-white/10 text-white rounded-lg transition-colors text-sm font-medium"
              >
                {isGenerating ? 'üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : 'üé≤ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å'}
              </button>
              <button
                onClick={onClose}
                className="w-8 h-8 bg-white/20 hover:bg-white/30 text-white rounded-lg flex items-center justify-center transition-colors"
              >
                ‚úï
              </button>
            </div>
          </div>
        </div>

        {/* Content */}
        <div className="p-6">
          {isGenerating ? (
            <div className="flex items-center justify-center py-12">
              <div className="text-center">
                <div className="animate-spin w-12 h-12 border-4 border-purple-500 border-t-transparent rounded-full mx-auto mb-4"></div>
                <h3 className="text-lg font-semibold text-white mb-2">–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–≤–µ—Å—Ç...</h3>
                <p className="text-gray-400">AI —Å–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</p>
              </div>
            </div>
          ) : questSteps.length === 0 ? (
            <div className="text-center py-12">
              <div className="text-6xl mb-4">ü§ñ</div>
              <h3 className="text-lg font-semibold text-white mb-2">–ö–≤–µ—Å—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω</h3>
              <p className="text-gray-400 mb-4">–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞</p>
              <button
                onClick={generateQuest}
                className="px-4 py-2 bg-purple-600 hover:bg-purple-500 text-white rounded-lg transition-colors"
              >
                –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–≤–µ—Å—Ç
              </button>
            </div>
          ) : (
            <>
              {/* Progress */}
              <div className="mb-6">
                <div className="flex items-center justify-between mb-2">
                  <span className="text-sm text-gray-400">–ü—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞</span>
                  <span className="text-sm text-gray-400">{currentStep + 1} / {questSteps.length}</span>
                </div>
                <div className="w-full bg-gray-700 rounded-full h-2">
                  <div 
                    className="bg-gradient-to-r from-purple-500 to-indigo-500 h-2 rounded-full transition-all duration-300"
                    style={{ width: `${((currentStep + 1) / questSteps.length) * 100}%` }}
                  ></div>
                </div>
              </div>

              {/* Quest Content */}
              {currentStepData && (
                <>
                  <h3 className="text-xl font-bold text-white mb-3">{currentStepData.title}</h3>
                  <p className="text-gray-300 leading-relaxed mb-6">{currentStepData.description}</p>

                  {/* Choices */}
                  <div className="space-y-3">
                    {currentStepData.choices.map((choice) => (
                      <button
                        key={choice.id}
                        onClick={() => handleChoice(choice)}
                        disabled={!canMakeChoice(choice)}
                        className={`w-full p-4 rounded-lg border-2 text-left transition-all duration-200 ${
                          canMakeChoice(choice)
                            ? 'border-gray-600 bg-gray-700 hover:border-purple-500 hover:bg-purple-600/20'
                            : 'border-gray-700 bg-gray-800 opacity-50 cursor-not-allowed'
                        }`}
                      >
                        <div className="flex items-center justify-between">
                          <span className="text-white font-medium">{choice.text}</span>
                          {choice.statModifier && (
                            <span className="text-xs text-gray-400">
                              {choice.statModifier.value > 0 ? '+' : ''}{choice.statModifier.value} {choice.statModifier.stat}
                            </span>
                          )}
                        </div>
                        {!canMakeChoice(choice) && (
                          <div className="text-xs text-red-400 mt-1">
                            –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
                          </div>
                        )}
                      </button>
                    ))}
                  </div>
                </>
              )}

              {/* Character Stats */}
              <div className="mt-8 pt-6 border-t border-gray-700">
                <h3 className="text-white font-semibold mb-3 flex items-center gap-2">
                  <span className="text-blue-400">üìä</span>
                  –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                </h3>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                  {Object.entries(characterState.stats || {}).map(([key, stat]) => (
                    <div key={key} className="text-center">
                      <div className="text-xs text-gray-400">{stat.name}</div>
                      <div className="text-lg font-bold text-white">{stat.value}</div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Quest Complete */}
              {isLastStep && currentStepData && (
                <div className="mt-6 p-4 bg-green-600/20 border border-green-500/30 rounded-lg">
                  <div className="flex items-center gap-2 mb-2">
                    <span className="text-green-400">üéâ</span>
                    <span className="text-green-400 font-semibold">–ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!</span>
                  </div>
                  <p className="text-green-300 text-sm">
                    –≠—Ç–æ –±—ã–ª–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–æ–≤. –í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∫–≤–µ—Å—Ç—ã –±—É–¥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –≤—ã–±–æ—Ä–æ–≤.
                  </p>
                </div>
              )}
            </>
          )}
        </div>
      </div>
    </div>
  );
};