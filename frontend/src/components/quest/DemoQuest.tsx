import { useState } from 'react';
import type { DiscoElysiumCharacter } from '../../types/discoElysium';

interface DemoQuestProps {
  character: DiscoElysiumCharacter;
  onClose: () => void;
}

interface QuestStep {
  id: string;
  title: string;
  description: string;
  choices: QuestChoice[];
  requiredStat?: string;
  requiredValue?: number;
}

interface QuestChoice {
  id: string;
  text: string;
  result: string;
  statModifier?: { stat: string; value: number };
}

export default function DemoQuest({ character, onClose }: DemoQuestProps) {
  const [currentStep, setCurrentStep] = useState(0);
  const [characterState, setCharacterState] = useState(character);

  const questSteps: QuestStep[] = [
    {
      id: 'start',
      title: '–ù–∞—á–∞–ª–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è',
      description: '–í—ã –ø—Ä–æ—Å—ã–ø–∞–µ—Ç–µ—Å—å –≤ —Ç–µ–º–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ. –ì–æ–ª–æ–≤–∞ –±–æ–ª–∏—Ç, –∏ –≤—ã –Ω–µ –ø–æ–º–Ω–∏—Ç–µ, –∫–∞–∫ —Å—é–¥–∞ –ø–æ–ø–∞–ª–∏. –í —É–≥–ª—É –∫–æ–º–Ω–∞—Ç—ã —Å—Ç–æ–∏—Ç –∑–∞–≥–∞–¥–æ—á–Ω–∞—è —Ñ–∏–≥—É—Ä–∞.',
      choices: [
        {
          id: 'approach',
          text: '–ü–æ–¥–æ–π—Ç–∏ –∫ —Ñ–∏–≥—É—Ä–µ',
          result: '–í—ã —Ä–µ—à–∞–µ—Ç–µ –ø–æ–¥–æ–π—Ç–∏ –±–ª–∏–∂–µ...',
          statModifier: { stat: 'logic', value: 1 }
        },
        {
          id: 'observe',
          text: '–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è',
          result: '–í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –∏–∑—É—á–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É...',
          statModifier: { stat: 'analysis', value: 1 }
        },
        {
          id: 'shout',
          text: '–ö—Ä–∏–∫–Ω—É—Ç—å: "–ö—Ç–æ –∑–¥–µ—Å—å?!"',
          result: '–í–∞—à –≥–æ–ª–æ—Å —ç—Ö–æ–º –æ—Ç–¥–∞–µ—Ç—Å—è –ø–æ –∫–æ–º–Ω–∞—Ç–µ...',
          statModifier: { stat: 'rhetoric', value: 1 }
        }
      ]
    },
    {
      id: 'mystery',
      title: '–ó–∞–≥–∞–¥–æ—á–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞',
      description: '–§–∏–≥—É—Ä–∞ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –∫ –≤–∞–º. –≠—Ç–æ —Å—Ç–∞—Ä–∏–∫ –≤ –¥–ª–∏–Ω–Ω–æ–º –ø–ª–∞—â–µ. –ï–≥–æ –≥–ª–∞–∑–∞ —Å–≤–µ—Ç—è—Ç—Å—è —Å—Ç—Ä–∞–Ω–Ω—ã–º —Å–≤–µ—Ç–æ–º.',
      choices: [
        {
          id: 'talk',
          text: '–ó–∞–≥–æ–≤–æ—Ä–∏—Ç—å —Å –Ω–∏–º',
          result: '–°—Ç–∞—Ä–∏–∫ —É–ª—ã–±–∞–µ—Ç—Å—è: "–ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ —Ç—ã –ø—Ä–æ—Å–Ω—É–ª—Å—è..."',
          statModifier: { stat: 'empathy', value: 1 }
        },
        {
          id: 'analyze',
          text: '–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–Ω—è—Ç—å, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç',
          result: '–í—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é...',
          statModifier: { stat: 'logic', value: 2 }
        },
        {
          id: 'defend',
          text: '–ü—Ä–∏–Ω—è—Ç—å –æ–±–æ—Ä–æ–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é',
          result: '–í—ã –≥–æ—Ç–æ–≤–∏—Ç–µ—Å—å –∫ –æ–±–æ—Ä–æ–Ω–µ...',
          statModifier: { stat: 'impulse', value: 1 }
        }
      ]
    },
    {
      id: 'revelation',
      title: '–û—Ç–∫—Ä–æ–≤–µ–Ω–∏–µ',
      description: '–°—Ç–∞—Ä–∏–∫ –æ–±—ä—è—Å–Ω—è–µ—Ç: "–¢—ã –≤ –º–∏—Ä–µ, –≥–¥–µ —Ç–≤–æ–∏ –º—ã—Å–ª–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é. –¢–≤–æ–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç, –∫–∞–∫ —Ç—ã –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—à—å —ç—Ç–æ—Ç –º–∏—Ä."',
      choices: [
        {
          id: 'accept',
          text: '–ü—Ä–∏–Ω—è—Ç—å —ç—Ç–æ –∫–∞–∫ –¥–∞–Ω–Ω–æ—Å—Ç—å',
          result: '–í—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –Ω–æ–≤—ã–π –º–∏—Ä –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.',
          statModifier: { stat: 'will', value: 1 }
        },
        {
          id: 'question',
          text: '–ó–∞–¥–∞—Ç—å –±–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤',
          result: '–°—Ç–∞—Ä–∏–∫ —Ç–µ—Ä–ø–µ–ª–∏–≤–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã...',
          statModifier: { stat: 'rhetoric', value: 2 }
        },
        {
          id: 'explore',
          text: '–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∏–∑—É—á–∏—Ç—å —Å–≤–æ–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏',
          result: '–í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –Ω–æ–≤—ã–º–∏ —Å–∏–ª–∞–º–∏...',
          statModifier: { stat: 'analysis', value: 1 }
        }
      ]
    },
    {
      id: 'choice',
      title: '–í—ã–±–æ—Ä –ø—É—Ç–∏',
      description: '–°—Ç–∞—Ä–∏–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º —Ç—Ä–∏ –ø—É—Ç–∏: –ø—É—Ç—å –ú—É–¥—Ä–æ—Å—Ç–∏, –ø—É—Ç—å –°–∏–ª—ã –∏–ª–∏ –ø—É—Ç—å –†–∞–≤–Ω–æ–≤–µ—Å–∏—è. –ö–∞–∫–æ–π –≤—ã –≤—ã–±–µ—Ä–µ—Ç–µ?',
      choices: [
        {
          id: 'wisdom',
          text: '–ü—É—Ç—å –ú—É–¥—Ä–æ—Å—Ç–∏ (–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç)',
          result: '–í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –ø—É—Ç—å –∑–Ω–∞–Ω–∏–π –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è.',
          statModifier: { stat: 'logic', value: 2 }
        },
        {
          id: 'strength',
          text: '–ü—É—Ç—å –°–∏–ª—ã (–§–∏–∑–∏–∫–∞)',
          result: '–í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –ø—É—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –∏ —Ä–µ—à–∏–º–æ—Å—Ç–∏.',
          statModifier: { stat: 'endurance', value: 2 }
        },
        {
          id: 'balance',
          text: '–ü—É—Ç—å –†–∞–≤–Ω–æ–≤–µ—Å–∏—è (–ü—Å–∏—Ö–∏–∫–∞)',
          result: '–í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –ø—É—Ç—å –≥–∞—Ä–º–æ–Ω–∏–∏ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è.',
          statModifier: { stat: 'empathy', value: 2 }
        }
      ]
    },
    {
      id: 'end',
      title: '–ù–æ–≤–æ–µ –Ω–∞—á–∞–ª–æ',
      description: '–í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, –∫–∞–∫ –≤–∞—à–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Ç—É—Ç. –ú–∏—Ä –≤–æ–∫—Ä—É–≥ –≤–∞—Å –Ω–∞—á–∏–Ω–∞–µ—Ç –º–µ–Ω—è—Ç—å—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—à–∏–º –≤—ã–±–æ—Ä–æ–º. –≠—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ –≤–∞—à–µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è...',
      choices: [
        {
          id: 'continue',
          text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ',
          result: '–í—ã –≥–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤—ã–º –≤—ã–∑–æ–≤–∞–º!'
        }
      ]
    }
  ];

  const handleChoice = (choice: QuestChoice) => {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
    if (choice.statModifier) {
      const newStats = { ...characterState.stats };
      const statName = choice.statModifier.stat;
      if (newStats[statName]) {
        newStats[statName].value = Math.min(10, Math.max(0, newStats[statName].value + choice.statModifier.value));
      }
      setCharacterState({
        ...characterState,
        stats: newStats
      });
    }

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    if (currentStep < questSteps.length - 1) {
      setCurrentStep(currentStep + 1);
    }
  };

  const getStatValue = (statName: string): number => {
    return characterState.stats[statName]?.value || 0;
  };

  const canMakeChoice = (choice: QuestChoice): boolean => {
    if (!choice.statModifier) return true;
    
    const currentValue = getStatValue(choice.statModifier.stat);
    return currentValue >= (choice.statModifier.value || 0);
  };

  const currentStepData = questSteps[currentStep];
  const isLastStep = currentStep === questSteps.length - 1;

  return (
    <div className="bg-gray-800 rounded-xl border border-gray-600 shadow-2xl w-full max-w-4xl mx-auto max-h-[90vh] overflow-y-auto">
      {/* Header */}
      <div className="bg-gradient-to-r from-purple-600 to-indigo-600 px-6 py-4 rounded-t-xl border-b border-gray-600">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-white/20 rounded-lg flex items-center justify-center">
              <span className="text-2xl">üé≠</span>
            </div>
            <div>
              <h2 className="text-xl font-bold text-white">–î–µ–º–æ-–∫–≤–µ—Å—Ç</h2>
              <p className="text-purple-200 text-sm">–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {character.name}</p>
            </div>
          </div>
          <button
            onClick={onClose}
            className="w-8 h-8 bg-white/20 hover:bg-white/30 text-white rounded-lg flex items-center justify-center transition-colors"
            title="–ó–∞–∫—Ä—ã—Ç—å"
          >
            √ó
          </button>
        </div>
      </div>

      {/* Progress */}
      <div className="px-6 py-3 bg-gray-700 border-b border-gray-600">
        <div className="flex items-center justify-between text-sm">
          <span className="text-gray-300">–®–∞–≥ {currentStep + 1} –∏–∑ {questSteps.length}</span>
          <div className="flex gap-2">
            {questSteps.map((_, index) => (
              <div
                key={index}
                className={`w-2 h-2 rounded-full ${
                  index <= currentStep ? 'bg-purple-500' : 'bg-gray-600'
                }`}
              />
            ))}
          </div>
        </div>
        <div className="w-full bg-gray-600 rounded-full h-1 mt-2">
          <div
            className="bg-purple-500 h-1 rounded-full transition-all duration-300"
            style={{ width: `${((currentStep + 1) / questSteps.length) * 100}%` }}
          />
        </div>
      </div>

      {/* Content */}
      <div className="p-6">
        {/* Character Stats */}
        <div className="mb-6 p-4 bg-gray-700 rounded-lg border border-gray-600">
          <h3 className="text-white font-semibold mb-3 flex items-center gap-2">
            <span className="text-blue-400">üìä</span>
            –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
          </h3>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
            {Object.entries(characterState.stats).map(([key, stat]) => (
              <div key={key} className="text-center">
                <div className="text-xs text-gray-400">{stat.name}</div>
                <div className="text-lg font-bold text-white">{stat.value}</div>
              </div>
            ))}
          </div>
        </div>

        {/* Quest Step */}
        <div className="mb-6">
          <h3 className="text-xl font-bold text-white mb-3">{currentStepData.title}</h3>
          <p className="text-gray-300 leading-relaxed mb-6">{currentStepData.description}</p>

          {/* Choices */}
          <div className="space-y-3">
            {currentStepData.choices.map((choice) => (
              <button
                key={choice.id}
                onClick={() => handleChoice(choice)}
                disabled={!canMakeChoice(choice)}
                className={`w-full p-4 rounded-lg border-2 text-left transition-all duration-200 ${
                  canMakeChoice(choice)
                    ? 'border-gray-600 bg-gray-700 hover:border-purple-500 hover:bg-purple-600/20'
                    : 'border-gray-700 bg-gray-800 opacity-50 cursor-not-allowed'
                }`}
              >
                <div className="flex items-center justify-between">
                  <span className="text-white font-medium">{choice.text}</span>
                  {choice.statModifier && (
                    <span className="text-xs text-gray-400">
                      {choice.statModifier.value > 0 ? '+' : ''}{choice.statModifier.value} {choice.statModifier.stat}
                    </span>
                  )}
                </div>
                {!canMakeChoice(choice) && (
                  <div className="text-xs text-red-400 mt-1">
                    –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
                  </div>
                )}
              </button>
            ))}
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex justify-between">
          {currentStep > 0 && (
            <button
              onClick={() => setCurrentStep(currentStep - 1)}
              className="px-4 py-2 bg-gray-600 hover:bg-gray-500 text-white rounded-lg transition-colors"
            >
              ‚Üê –ù–∞–∑–∞–¥
            </button>
          )}
          
          {isLastStep && (
            <button
              onClick={onClose}
              className="px-6 py-2 bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-500 hover:to-indigo-500 text-white rounded-lg font-medium transition-all duration-200 shadow-lg"
            >
              –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–≤–µ—Å—Ç
            </button>
          )}
        </div>
      </div>
    </div>
  );
}

