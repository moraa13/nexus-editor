import React, { useState } from 'react';
import Button from '../ui/Button';
import Card from '../ui/Card';
import type { GameTheme } from '../../types/theme';

interface DialogueBoxProps {
  theme: GameTheme;
  currentScene?: any;
  onSceneChange?: (sceneId: string) => void;
}

interface DialogueOption {
  id: string;
  text: string;
  consequence?: string;
  nextSceneId?: string;
}

export default function DialogueBox({ theme, currentScene, onSceneChange }: DialogueBoxProps) {
  const [selectedOption, setSelectedOption] = useState<string | null>(null);
  const [dialogueHistory, setDialogueHistory] = useState<string[]>([]);

  // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  const mockDialogue = {
    text: "–í—ã —Å—Ç–æ–∏—Ç–µ –≤ —Ç–µ–º–Ω–æ–º –ø–µ—Ä–µ—É–ª–∫–µ. –í–ø–µ—Ä–µ–¥–∏ –≤–∏–¥–Ω–µ–µ—Ç—Å—è —Ç—É—Å–∫–ª—ã–π —Å–≤–µ—Ç –Ω–µ–æ–Ω–æ–≤–æ–π –≤—ã–≤–µ—Å–∫–∏. –ß—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ?",
    options: [
      {
        id: '1',
        text: '–ü–æ–¥–æ–π—Ç–∏ –∫ –≤—ã–≤–µ—Å–∫–µ',
        consequence: '–í—ã –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç–µ—Å—å –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É —Å–≤–µ—Ç–∞...',
        nextSceneId: 'scene2'
      },
      {
        id: '2',
        text: '–û—Å—Ç–∞—Ç—å—Å—è –≤ —Ç–µ–Ω–∏',
        consequence: '–í—ã —Ä–µ—à–∞–µ—Ç–µ –æ—Å—Ç–∞—Ç—å—Å—è –Ω–µ–∑–∞–º–µ—á–µ–Ω–Ω—ã–º...',
        nextSceneId: 'scene3'
      },
      {
        id: '3',
        text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ',
        consequence: '–í—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ—Å—å...',
        nextSceneId: 'scene4'
      }
    ]
  };

  const handleOptionSelect = (option: DialogueOption) => {
    setSelectedOption(option.id);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –≤ –∏—Å—Ç–æ—Ä–∏—é
    setDialogueHistory(prev => [...prev, option.text]);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–µ
    setTimeout(() => {
      if (option.consequence) {
        setDialogueHistory(prev => [...prev, option.consequence!]);
      }
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ü–µ–Ω–µ
      if (option.nextSceneId && onSceneChange) {
        setTimeout(() => {
          onSceneChange(option.nextSceneId!);
          setSelectedOption(null);
        }, 2000);
      }
    }, 1000);
  };

  return (
    <div className="h-full flex flex-col">
      {/* Dialogue History */}
      <div 
        className="flex-1 overflow-y-auto p-4 mb-4 rounded-lg"
        style={{ 
          backgroundColor: theme.colors.surface,
          border: `1px solid ${theme.colors.border}`
        }}
      >
        <div className="space-y-3">
          {/* Main dialogue text */}
          <div 
            className="p-4 rounded-lg"
            style={{ 
              backgroundColor: theme.colors.background,
              border: `1px solid ${theme.colors.border}`
            }}
          >
            <p 
              className="text-lg leading-relaxed"
              style={{ 
                color: theme.colors.text,
                fontFamily: theme.fonts.primary 
              }}
            >
              {mockDialogue.text}
            </p>
          </div>

          {/* Dialogue history */}
          {dialogueHistory.map((text, index) => (
            <div 
              key={index}
              className="p-3 rounded-lg"
              style={{ 
                backgroundColor: theme.colors.background,
                border: `1px solid ${theme.colors.border}`,
                opacity: 0.7
              }}
            >
              <p 
                className="text-sm"
                style={{ 
                  color: theme.colors.textSecondary,
                  fontFamily: theme.fonts.secondary 
                }}
              >
                {text}
              </p>
            </div>
          ))}
        </div>
      </div>

      {/* Dialogue Options */}
      <div className="space-y-2">
        {mockDialogue.options.map((option) => (
          <Button
            key={option.id}
            variant={selectedOption === option.id ? 'primary' : 'secondary'}
            onClick={() => handleOptionSelect(option)}
            disabled={selectedOption !== null}
            className="w-full text-left justify-start p-4 h-auto"
            style={{
              backgroundColor: selectedOption === option.id 
                ? theme.colors.accent 
                : theme.colors.surface,
              color: theme.colors.text,
              borderColor: theme.colors.border,
              fontFamily: theme.fonts.primary,
              opacity: selectedOption !== null && selectedOption !== option.id ? 0.5 : 1
            }}
          >
            <div>
              <p className="font-medium">{option.text}</p>
              {option.consequence && (
                <p 
                  className="text-sm mt-1"
                  style={{ 
                    color: theme.colors.textSecondary,
                    fontFamily: theme.fonts.secondary 
                  }}
                >
                  {option.consequence}
                </p>
              )}
            </div>
          </Button>
        ))}
      </div>

      {/* Quick Actions */}
      <div className="flex gap-2 mt-4">
        <Button
          variant="ghost"
          size="sm"
          style={{ 
            color: theme.colors.textSecondary,
            borderColor: theme.colors.border
          }}
        >
          ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        </Button>
        <Button
          variant="ghost"
          size="sm"
          style={{ 
            color: theme.colors.textSecondary,
            borderColor: theme.colors.border
          }}
        >
          üìñ –ò—Å—Ç–æ—Ä–∏—è
        </Button>
        <Button
          variant="ghost"
          size="sm"
          style={{ 
            color: theme.colors.textSecondary,
            borderColor: theme.colors.border
          }}
        >
          ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        </Button>
      </div>
    </div>
  );
}
