import { useState } from 'react';
import { TONE_TEMPLATES, type GameSetting, type ToneTemplate } from '../../types/discoElysium';
import { toast } from '../ui/SimpleToast';

interface SettingPanelProps {
  currentSetting?: GameSetting;
  onSettingChange?: (setting: GameSetting) => void;
  compact?: boolean;
  onClose?: () => void;
}

export default function SettingPanel({ currentSetting, onSettingChange, compact = false, onClose }: SettingPanelProps) {
  const [selectedTemplate, setSelectedTemplate] = useState<string>('noir');
  const [customSetting, setCustomSetting] = useState<GameSetting>(currentSetting || {
    genre: 'noir',
    emotionalTone: 'dark',
    abstractionLevel: 'realistic',
    narrativeStyle: 'first-person',
    uiTheme: 'dark-noir'
  });
  
  // AI Tone Assistant states
  const [aiKeywords, setAiKeywords] = useState<string>('');
  const [isGenerating, setIsGenerating] = useState<boolean>(false);
  const [generatedContent, setGeneratedContent] = useState<string>('');

  const handleTemplateSelect = (templateId: string) => {
    setSelectedTemplate(templateId);
    const template = TONE_TEMPLATES[templateId];
    
    const newSetting: GameSetting = {
      genre: templateId as any,
      emotionalTone: templateId === 'noir' ? 'dark' : templateId === 'fantasy' ? 'inspiring' : 'ironic',
      abstractionLevel: templateId === 'cyberpunk' ? 'metaphysical' : 'realistic',
      narrativeStyle: 'first-person',
      uiTheme: template.uiTheme as any
    };
    
    setCustomSetting(newSetting);
    onSettingChange?.(newSetting);
  };

  const handleCustomChange = (field: keyof GameSetting, value: string) => {
    const newSetting = { ...customSetting, [field]: value };
    setCustomSetting(newSetting);
    onSettingChange?.(newSetting);
  };

  // AI Tone Generation
  const generateToneFromKeywords = async () => {
    if (!aiKeywords.trim()) return;
    
    setIsGenerating(true);
    
    // Simulate AI generation with predefined responses based on keywords
    const keywordLower = aiKeywords.toLowerCase();
    
    // Simple keyword-based tone generation
    let suggestedGenre = 'noir';
    let suggestedTone = 'dark';
    let suggestedAbstraction = 'realistic';
    let generatedDescription = '';
    
    if (keywordLower.includes('–∫–∏–±–µ—Ä') || keywordLower.includes('—Ä–æ–±–æ—Ç') || keywordLower.includes('–Ω–µ–æ–Ω')) {
      suggestedGenre = 'cyberpunk';
      suggestedTone = 'ironic';
      suggestedAbstraction = 'metaphysical';
      generatedDescription = '–ù–µ–æ–Ω–æ–≤—ã–π –º–∏—Ä –∫–∏–±–æ—Ä–≥–æ–≤ –∏ —Ö–∞–∫–µ—Ä–æ–≤. –†–µ–∞–ª—å–Ω–æ—Å—Ç—å —Å–º–µ—à–∞–ª–∞—Å—å —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å—é, –∞ –ª—é–¥–∏ —Å—Ç–∞–ª–∏ –º–∞—à–∏–Ω–∞–º–∏.';
    } else if (keywordLower.includes('–º–∞–≥–∏—è') || keywordLower.includes('–¥—Ä–∞–∫–æ–Ω') || keywordLower.includes('—ç–ª—å—Ñ')) {
      suggestedGenre = 'fantasy';
      suggestedTone = 'inspiring';
      suggestedAbstraction = 'metaphysical';
      generatedDescription = '–ú–∞–≥–∏—á–µ—Å–∫–∏–π –º–∏—Ä, –≥–¥–µ –¥—Ä–µ–≤–Ω–∏–µ —Å–∏–ª—ã –ø—Ä–æ–±—É–∂–¥–∞—é—Ç—Å—è, –∞ –≥–µ—Ä–æ–∏ –≤—Å—Ç—É–ø–∞—é—Ç –≤ —ç–ø–∏—á–µ—Å–∫–∏–µ –±–∏—Ç–≤—ã –¥–æ–±—Ä–∞ –∏ –∑–ª–∞.';
    } else if (keywordLower.includes('–¥–æ–∂–¥—å') || keywordLower.includes('–≥–æ—Ä–æ–¥') || keywordLower.includes('–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ')) {
      suggestedGenre = 'noir';
      suggestedTone = 'melancholic';
      suggestedAbstraction = 'realistic';
      generatedDescription = '–ú—Ä–∞—á–Ω—ã–π –≥–æ—Ä–æ–¥ –ø–æ–¥ –¥–æ–∂–¥—ë–º, –≥–¥–µ –∫–∞–∂–¥—ã–π –ø–µ—Ä–µ—É–ª–æ–∫ —Ö—Ä–∞–Ω–∏—Ç —Å–≤–æ–∏ —Å–µ–∫—Ä–µ—Ç—ã, –∞ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ ‚Äî –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Å–ø—É—Ç–Ω–∏–∫.';
    } else if (keywordLower.includes('–∫–æ—Å–º–æ—Å') || keywordLower.includes('–∑–≤–µ–∑–¥–∞') || keywordLower.includes('–≥–∞–ª–∞–∫—Ç–∏–∫–∞')) {
      suggestedGenre = 'post-apocalyptic';
      suggestedTone = 'hopeful';
      suggestedAbstraction = 'dreamlike';
      generatedDescription = '–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –∫–æ—Å–º–æ—Å, –≥–¥–µ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ –∏—â–µ—Ç –Ω–æ–≤—ã–π –¥–æ–º —Å—Ä–µ–¥–∏ –∑–≤—ë–∑–¥, –∞ –Ω–∞–¥–µ–∂–¥–∞ ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø—É—Ç–Ω–∏–∫.';
    } else {
      generatedDescription = '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –º–∏—Ä, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∏–∑ –≤–∞—à–∏—Ö —Å–ª–æ–≤. –ö–∞–∂–¥–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.';
    }
    
    // Update settings based on AI suggestion
    const aiSuggestedSetting: GameSetting = {
      genre: suggestedGenre as any,
      emotionalTone: suggestedTone as any,
      abstractionLevel: suggestedAbstraction as any,
      narrativeStyle: 'first-person',
      uiTheme: suggestedGenre === 'cyberpunk' ? 'neon-cyber' : 
                suggestedGenre === 'fantasy' ? 'bright-fantasy' : 'dark-noir'
    };
    
    setCustomSetting(aiSuggestedSetting);
    setSelectedTemplate(suggestedGenre);
    setGeneratedContent(generatedDescription);
    
    // Simulate delay
    setTimeout(() => {
      setIsGenerating(false);
      onSettingChange?.(aiSuggestedSetting);
    }, 1500);
  };

  const templateOptions = [
    { id: 'noir', ...TONE_TEMPLATES.noir },
    { id: 'fantasy', ...TONE_TEMPLATES.fantasy },
    { id: 'cyberpunk', ...TONE_TEMPLATES.cyberpunk }
  ];

  const genreOptions = [
    { value: 'noir', label: '–ù—É–∞—Ä', icon: 'üåßÔ∏è' },
    { value: 'fantasy', label: '–§—ç–Ω—Ç–µ–∑–∏', icon: 'üßô‚Äç‚ôÇÔ∏è' },
    { value: 'cyberpunk', label: '–ö–∏–±–µ—Ä–ø–∞–Ω–∫', icon: 'ü§ñ' },
    { value: 'magical-realism', label: '–ú–∞–≥–∏—á–µ—Å–∫–∏–π —Ä–µ–∞–ª–∏–∑–º', icon: '‚ú®' },
    { value: 'post-apocalyptic', label: '–ü–æ—Å—Ç–∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å', icon: 'üíÄ' },
    { value: 'detective', label: '–î–µ—Ç–µ–∫—Ç–∏–≤', icon: 'üîç' },
    { value: 'horror', label: '–•–æ—Ä—Ä–æ—Ä', icon: 'üëª' },
    { value: 'comedy', label: '–ö–æ–º–µ–¥–∏—è', icon: 'üòÑ' }
  ];

  const emotionalToneOptions = [
    { value: 'dark', label: '–ú—Ä–∞—á–Ω–æ', icon: 'üåë' },
    { value: 'ironic', label: '–ò—Ä–æ–Ω–∏—á–Ω–æ', icon: 'üòè' },
    { value: 'romantic', label: '–†–æ–º–∞–Ω—Ç–∏—á–Ω–æ', icon: 'üíï' },
    { value: 'absurd', label: '–ê–±—Å—É—Ä–¥–Ω–æ', icon: 'ü§™' },
    { value: 'inspiring', label: '–í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ', icon: 'üåü' },
    { value: 'melancholic', label: '–ú–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω–æ', icon: 'üòî' },
    { value: 'hopeful', label: '–ù–∞–¥–µ–∂–¥–Ω–æ', icon: 'üåà' },
    { value: 'chaotic', label: '–•–∞–æ—Ç–∏—á–Ω–æ', icon: 'üåÄ' }
  ];

  const abstractionOptions = [
    { value: 'realistic', label: '–ü—Ä–∏–∑–µ–º–ª—ë–Ω–Ω—ã–π —Ä–µ–∞–ª–∏–∑–º' },
    { value: 'metaphysical', label: '–ú–µ—Ç–∞—Ñ–∏–∑–∏–∫–∞' },
    { value: 'dreamlike', label: '–°–Ω—ã' },
    { value: 'hallucinatory', label: '–ì–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–∏' }
  ];

  const narrativeOptions = [
    { value: 'third-person', label: '–û—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞' },
    { value: 'first-person', label: '–û—Ç –ª–∏—Ü–∞ –≥–µ—Ä–æ—è' },
    { value: 'stream-of-consciousness', label: '–ü–æ—Ç–æ–∫ —Å–æ–∑–Ω–∞–Ω–∏—è' },
    { value: 'epistolary', label: '–≠–ø–∏—Å—Ç–æ–ª—è—Ä–Ω—ã–π' }
  ];

  if (compact) {
    return (
      <div className="p-6">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-bold text-white">üé≠ –°–µ—Ç—Ç–∏–Ω–≥ –∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å</h2>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-white transition-colors"
          >
            ‚Üê
          </button>
        </div>

        {/* Description */}
        <div className="mb-6">
          <p className="text-gray-300 text-sm">
            –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–Ω –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏. –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–ª–∏—è—é—Ç –Ω–∞ —Ç–µ–∫—Å—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –≤ –∏–≥—Ä–µ.
          </p>
        </div>

        {/* Settings Sections */}
        <div className="space-y-6">
          {/* –ñ–ê–ù–† */}
          <div className="bg-gray-700 p-4 rounded-lg">
            <h3 className="text-lg font-semibold text-white mb-4">–ñ–ê–ù–†</h3>
            <div className="space-y-3">
              {[
                { value: 'noir', label: '–ù—É–∞—Ä', icon: 'üåßÔ∏è' },
                { value: 'fantasy', label: '–§—ç–Ω—Ç–µ–∑–∏', icon: 'üßô‚Äç‚ôÇÔ∏è' },
                { value: 'cyberpunk', label: '–ö–∏–±–µ—Ä–ø–∞–Ω–∫', icon: 'ü§ñ' },
                { value: 'post-apocalyptic', label: '–ü–æ—Å—Ç–∞–ø–æ–∫', icon: 'üíÄ' }
              ].map((option) => (
                <label key={option.value} className="flex items-center gap-3 cursor-pointer">
                  <input
                    type="radio"
                    name="genre"
                    value={option.value}
                    checked={customSetting.genre === option.value}
                    onChange={(e) => handleCustomChange('genre', e.target.value)}
                    className="w-4 h-4 text-blue-600 bg-gray-600 border-gray-500 focus:ring-blue-500 focus:ring-2"
                  />
                  <span className="text-xl">{option.icon}</span>
                  <span className="text-white font-medium">{option.label}</span>
                </label>
              ))}
            </div>
          </div>

          {/* –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –¢–û–ù */}
          <div className="bg-gray-700 p-4 rounded-lg">
            <h3 className="text-lg font-semibold text-white mb-4">–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –¢–û–ù</h3>
            <div className="space-y-3">
              {[
                { value: 'dark', label: '–ú—Ä–∞—á–Ω–æ', icon: 'üåë' },
                { value: 'ironic', label: '–ò—Ä–æ–Ω–∏—á–Ω–æ', icon: 'üòè' },
                { value: 'romantic', label: '–†–æ–º–∞–Ω—Ç–∏—á–Ω–æ', icon: 'üíï' },
                { value: 'absurd', label: '–ê–±—Å—É—Ä–¥–Ω–æ', icon: 'ü§™' }
              ].map((option) => (
                <label key={option.value} className="flex items-center gap-3 cursor-pointer">
                  <input
                    type="radio"
                    name="emotionalTone"
                    value={option.value}
                    checked={customSetting.emotionalTone === option.value}
                    onChange={(e) => handleCustomChange('emotionalTone', e.target.value)}
                    className="w-4 h-4 text-blue-600 bg-gray-600 border-gray-500 focus:ring-blue-500 focus:ring-2"
                  />
                  <span className="text-xl">{option.icon}</span>
                  <span className="text-white font-medium">{option.label}</span>
                </label>
              ))}
            </div>
          </div>

          {/* –ù–ê–†–†–ê–¢–ò–í–ù–´–ô –°–¢–ò–õ–¨ */}
          <div className="bg-gray-700 p-4 rounded-lg">
            <h3 className="text-lg font-semibold text-white mb-4">–ù–ê–†–†–ê–¢–ò–í–ù–´–ô –°–¢–ò–õ–¨</h3>
            <div className="space-y-3">
              {[
                { value: 'third-person', label: '–û—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞' },
                { value: 'stream-of-consciousness', label: '–ü–æ—Ç–æ–∫ —Å–æ–∑–Ω–∞–Ω–∏—è' }
              ].map((option) => (
                <label key={option.value} className="flex items-center gap-3 cursor-pointer">
                  <input
                    type="radio"
                    name="narrativeStyle"
                    value={option.value}
                    checked={customSetting.narrativeStyle === option.value}
                    onChange={(e) => handleCustomChange('narrativeStyle', e.target.value)}
                    className="w-4 h-4 text-blue-600 bg-gray-600 border-gray-500 focus:ring-blue-500 focus:ring-2"
                  />
                  <span className="text-white font-medium">{option.label}</span>
                </label>
              ))}
            </div>
          </div>

          {/* –ù–ê–°–¢–†–û–ô–ö–ê */}
          <div className="bg-gray-700 p-4 rounded-lg">
            <h3 className="text-lg font-semibold text-white mb-4">–ù–ê–°–¢–†–û–ô–ö–ê</h3>
            <div className="text-gray-300">
              <p className="text-sm">–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è</p>
            </div>
          </div>
        </div>

        {/* AI Tone Assistant */}
        <div className="mt-6 p-4 bg-gray-700 rounded-lg">
          <h3 className="text-lg font-semibold text-white mb-3">ü§ñ AI –ü–æ–º–æ—â–Ω–∏–∫</h3>
          <div className="flex gap-2 mb-3">
            <input
              type="text"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: –¥–æ–∂–¥—å, –≥–æ—Ä–æ–¥, –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ"
              value={aiKeywords}
              onChange={(e) => setAiKeywords(e.target.value)}
              className="flex-1 px-3 py-2 bg-gray-600 border border-gray-500 rounded-lg text-white text-sm placeholder-gray-400 focus:outline-none focus:border-blue-500"
            />
            <button
              onClick={generateToneFromKeywords}
              disabled={isGenerating || !aiKeywords.trim()}
              className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                isGenerating || !aiKeywords.trim()
                  ? 'bg-gray-600 text-gray-400 cursor-not-allowed'
                  : 'bg-blue-600 hover:bg-blue-500 text-white'
              }`}
            >
              {isGenerating ? '‚è≥' : 'üé®'}
            </button>
          </div>
          {generatedContent && (
            <div className="p-3 bg-gray-600 rounded border-l-4 border-blue-500">
              <p className="text-sm text-gray-200 italic">{generatedContent}</p>
            </div>
          )}
        </div>

        {/* Save Button */}
        <div className="mt-8 flex justify-center">
          <button
            onClick={() => {
              onSettingChange?.(customSetting);
              toast('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success');
            }}
            className="px-8 py-3 bg-blue-600 hover:bg-blue-500 text-white font-medium rounded-lg transition-colors"
          >
            –°–û–•–†–ê–ù–ò–¢–¨
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-900 text-white p-8">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold mb-8">üé≠ –°–µ—Ç—Ç–∏–Ω–≥ –∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã</h1>
        
        {/* AI Tone Assistant */}
        <div className="mb-8">
          <h2 className="text-xl font-semibold mb-4">ü§ñ AI Tone Assistant</h2>
          <div className="bg-gray-800 p-6 rounded-lg border border-gray-600">
            <p className="text-gray-300 mb-4">
              –û–ø–∏—à–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –≤–∞—à–µ–π –∏–≥—Ä—ã 2-3 –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –∏ AI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç —Å—Ç–∏–ª—å:
            </p>
            <div className="flex gap-3 mb-4">
              <input
                type="text"
                placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: –∫–∏–±–µ—Ä–ø–∞–Ω–∫, –Ω–µ–æ–Ω, —Ö–∞–∫–µ—Ä"
                value={aiKeywords}
                onChange={(e) => setAiKeywords(e.target.value)}
                className="flex-1 px-4 py-3 bg-gray-700 border border-gray-500 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
              />
              <button
                onClick={generateToneFromKeywords}
                disabled={isGenerating || !aiKeywords.trim()}
                className={`px-6 py-3 rounded-lg font-medium transition-colors ${
                  isGenerating || !aiKeywords.trim()
                    ? 'bg-gray-600 text-gray-400 cursor-not-allowed'
                    : 'bg-blue-600 hover:bg-blue-500 text-white'
                }`}
              >
                {isGenerating ? '‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é...' : 'üé® –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–ª—å'}
              </button>
            </div>
            {generatedContent && (
              <div className="p-4 bg-gray-700 rounded-lg border-l-4 border-blue-500">
                <h4 className="text-sm font-medium text-blue-300 mb-2">AI –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç:</h4>
                <p className="text-gray-200 italic">{generatedContent}</p>
              </div>
            )}
          </div>
        </div>
        
        {/* Template Selection */}
        <div className="mb-8">
          <h2 className="text-xl font-semibold mb-4">–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {templateOptions.map((template) => (
              <button
                key={template.id}
                onClick={() => handleTemplateSelect(template.id)}
                className={`p-4 rounded-lg border-2 transition-all ${
                  selectedTemplate === template.id
                    ? 'border-blue-500 bg-blue-900/30'
                    : 'border-gray-600 bg-gray-700 hover:border-gray-500'
                }`}
              >
                <div className="flex items-center gap-3 mb-2">
                  <span className="text-3xl">{template.icon}</span>
                  <h3 className="text-lg font-medium">{template.name}</h3>
                </div>
                <p className="text-sm text-gray-300">{template.description}</p>
              </button>
            ))}
          </div>
        </div>

        {/* Custom Settings */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <h3 className="text-lg font-semibold mb-4">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-2">
                  üé≠ –ñ–∞–Ω—Ä
                </label>
                <select
                  value={customSetting.genre}
                  onChange={(e) => handleCustomChange('genre', e.target.value)}
                  className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500"
                >
                  {genreOptions.map((option) => (
                    <option key={option.value} value={option.value}>
                      {option.icon} {option.label}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">
                  üåà –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω
                </label>
                <select
                  value={customSetting.emotionalTone}
                  onChange={(e) => handleCustomChange('emotionalTone', e.target.value)}
                  className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500"
                >
                  {emotionalToneOptions.map((option) => (
                    <option key={option.value} value={option.value}>
                      {option.icon} {option.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>
          </div>

          <div>
            <h3 className="text-lg font-semibold mb-4">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ</h3>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-2">
                  üß† –£—Ä–æ–≤–µ–Ω—å –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏
                </label>
                <select
                  value={customSetting.abstractionLevel}
                  onChange={(e) => handleCustomChange('abstractionLevel', e.target.value)}
                  className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500"
                >
                  {abstractionOptions.map((option) => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">
                  üìö –ù–∞—Ä—Ä–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å
                </label>
                <select
                  value={customSetting.narrativeStyle}
                  onChange={(e) => handleCustomChange('narrativeStyle', e.target.value)}
                  className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500"
                >
                  {narrativeOptions.map((option) => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>
          </div>
        </div>

        {/* Preview */}
        <div className="mt-8 p-6 bg-gray-700 rounded-lg">
          <h3 className="text-lg font-semibold mb-4">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫</h3>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
            <div>
              <p className="text-gray-400">–ñ–∞–Ω—Ä:</p>
              <p className="font-medium">{genreOptions.find(g => g.value === customSetting.genre)?.label}</p>
            </div>
            <div>
              <p className="text-gray-400">–¢–æ–Ω:</p>
              <p className="font-medium">{emotionalToneOptions.find(t => t.value === customSetting.emotionalTone)?.label}</p>
            </div>
            <div>
              <p className="text-gray-400">–ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è:</p>
              <p className="font-medium">{abstractionOptions.find(a => a.value === customSetting.abstractionLevel)?.label}</p>
            </div>
            <div>
              <p className="text-gray-400">–°—Ç–∏–ª—å:</p>
              <p className="font-medium">{narrativeOptions.find(n => n.value === customSetting.narrativeStyle)?.label}</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
