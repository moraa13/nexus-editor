import { useState } from 'react';

interface TonePanelProps {
  currentTone: {
    mood: 'dark-noir' | 'satire' | 'absurd' | 'heroic' | 'psychological-drama';
    descriptionStyle: 'serious' | 'ironic' | 'roleplay';
    uiTheme: 'classic-dark' | 'cyberpunk' | 'paper-diary' | 'retro';
  };
  onToneChange: (tone: any) => void;
  compact?: boolean;
  onClose?: () => void;
}

export default function TonePanel({ currentTone, onToneChange, compact = false, onClose }: TonePanelProps) {
  const [tone, setTone] = useState(currentTone);

  const handleSave = () => {
    onToneChange(tone);
    if (onClose) onClose();
  };

  const moodOptions = [
    { id: 'dark-noir', name: '–ú—Ä–∞—á–Ω–∞—è –∏ –Ω—É–∞—Ä–Ω–∞—è', icon: 'üåÉ', description: '–¢—ë–º–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã' },
    { id: 'satire', name: '–°–∞—Ç–∏—Ä–∞', icon: 'üòè', description: '–ò—Ä–æ–Ω–∏—á–Ω—ã–π –≤–∑–≥–ª—è–¥ –Ω–∞ –º–∏—Ä' },
    { id: 'absurd', name: '–ê–±—Å—É—Ä–¥', icon: 'ü§™', description: '–ë–µ–∑—É–º–Ω—ã–µ –∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –ø–æ–≤–æ—Ä–æ—Ç—ã' },
    { id: 'heroic', name: '–ì–µ—Ä–æ–∏–∫–∞', icon: '‚öîÔ∏è', description: '–≠–ø–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –∏ –ø–æ–¥–≤–∏–≥–∏' },
    { id: 'psychological-drama', name: '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –¥—Ä–∞–º–∞', icon: 'üß†', description: '–ì–ª—É–±–æ–∫–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ –ø—Å–∏—Ö–∏–∫—É' }
  ];

  const descriptionStyles = [
    { id: 'serious', name: '–°–µ—Ä—å—ë–∑–Ω—ã–π', icon: 'üé≠', description: '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π, –¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å' },
    { id: 'ironic', name: '–ò—Ä–æ–Ω–∏—á–Ω—ã–π', icon: 'üòè', description: '–° –¥–æ–ª–µ–π —é–º–æ—Ä–∞ –∏ —Å–∞—Ä–∫–∞–∑–º–∞' },
    { id: 'roleplay', name: '–†–æ–ª–µ–≤–æ–π (3-–µ –ª–∏—Ü–æ)', icon: 'üìñ', description: '–ö–∞–∫ –≤ –∫–Ω–∏–≥–µ, –æ—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞' }
  ];

  const uiThemes = [
    { id: 'classic-dark', name: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Ç—å–º–∞', icon: 'üåô', description: '–¢—ë–º–Ω–∞—è —Ç–µ–º–∞ —Å —Å–∏–Ω–∏–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏' },
    { id: 'cyberpunk', name: '–ö–∏–±–µ—Ä–ø–∞–Ω–∫', icon: 'üîÆ', description: '–ù–µ–æ–Ω–æ–≤—ã–µ —Ü–≤–µ—Ç–∞, —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏–∫–∞' },
    { id: 'paper-diary', name: '–ë—É–º–∞–∂–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫', icon: 'üìú', description: '–°—Ç–∏–ª—å —Å—Ç–∞—Ä–∏–Ω–Ω–æ–π –±—É–º–∞–≥–∏' },
    { id: 'retro', name: '–†–µ—Ç—Ä–æ', icon: 'üì∫', description: '–ù–æ—Å—Ç–∞–ª—å–≥–∏—á–µ—Å–∫–∏–µ 80-90–µ' }
  ];

  const handleMoodChange = (moodId: string) => {
    setTone(prev => ({ ...prev, mood: moodId as any }));
  };

  const handleDescriptionStyleChange = (styleId: string) => {
    setTone(prev => ({ ...prev, descriptionStyle: styleId as any }));
  };

  const handleUIThemeChange = (themeId: string) => {
    setTone(prev => ({ ...prev, uiTheme: themeId as any }));
  };

  if (compact) {
    return (
      <div className="bg-gray-800 rounded-xl border border-gray-600 shadow-2xl w-full max-w-4xl mx-auto max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="bg-gradient-to-r from-purple-600 to-indigo-600 px-6 py-4 rounded-t-xl border-b border-gray-600">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-white/20 rounded-lg flex items-center justify-center">
                <span className="text-2xl">üõ†Ô∏è</span>
              </div>
              <div>
                <h2 className="text-xl font-bold text-white">–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã</h2>
                <p className="text-purple-200 text-sm">–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å—Ç–∏–ª—å –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –≤–∞—à–µ–π –Ω–æ–≤–µ–ª–ª—ã</p>
              </div>
            </div>
            {onClose && (
              <button
                onClick={onClose}
                className="w-8 h-8 bg-white/20 hover:bg-white/30 text-white rounded-lg flex items-center justify-center transition-colors"
                title="–ó–∞–∫—Ä—ã—Ç—å"
              >
                √ó
              </button>
            )}
          </div>
        </div>

        {/* Content */}
        <div className="p-6 space-y-8">
          {/* –û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ */}
          <div>
            <h3 className="text-lg font-semibold text-white mb-4 flex items-center gap-2">
              <span className="text-purple-400">üé≠</span>
              –û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
              {moodOptions.map((option) => (
                <button
                  key={option.id}
                  onClick={() => handleMoodChange(option.id)}
                  className={`p-4 rounded-xl border-2 transition-all duration-200 text-left group ${
                    tone.mood === option.id
                      ? 'border-purple-500 bg-purple-500/20 shadow-lg shadow-purple-500/25'
                      : 'border-gray-600 bg-gray-700 hover:border-gray-500 hover:bg-gray-600'
                  }`}
                >
                  <div className="flex items-center gap-3 mb-2">
                    <span className="text-2xl">{option.icon}</span>
                    <span className="font-medium text-white">{option.name}</span>
                  </div>
                  <p className="text-sm text-gray-400">{option.description}</p>
                </button>
              ))}
            </div>
          </div>

          {/* –°—Ç–∏–ª—å –æ–ø–∏—Å–∞–Ω–∏–π */}
          <div>
            <h3 className="text-lg font-semibold text-white mb-4 flex items-center gap-2">
              <span className="text-blue-400">‚úçÔ∏è</span>
              –°—Ç–∏–ª—å –æ–ø–∏—Å–∞–Ω–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
              {descriptionStyles.map((style) => (
                <button
                  key={style.id}
                  onClick={() => handleDescriptionStyleChange(style.id)}
                  className={`p-4 rounded-xl border-2 transition-all duration-200 text-left group ${
                    tone.descriptionStyle === style.id
                      ? 'border-blue-500 bg-blue-500/20 shadow-lg shadow-blue-500/25'
                      : 'border-gray-600 bg-gray-700 hover:border-gray-500 hover:bg-gray-600'
                  }`}
                >
                  <div className="flex items-center gap-3 mb-2">
                    <span className="text-2xl">{style.icon}</span>
                    <span className="font-medium text-white">{style.name}</span>
                  </div>
                  <p className="text-sm text-gray-400">{style.description}</p>
                </button>
              ))}
            </div>
          </div>

          {/* –°—Ç–∏–ª—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ */}
          <div>
            <h3 className="text-lg font-semibold text-white mb-4 flex items-center gap-2">
              <span className="text-green-400">üé®</span>
              –°—Ç–∏–ª—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (—Ç–µ–º—ã)
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3">
              {uiThemes.map((theme) => (
                <button
                  key={theme.id}
                  onClick={() => handleUIThemeChange(theme.id)}
                  className={`p-4 rounded-xl border-2 transition-all duration-200 text-left group ${
                    tone.uiTheme === theme.id
                      ? 'border-green-500 bg-green-500/20 shadow-lg shadow-green-500/25'
                      : 'border-gray-600 bg-gray-700 hover:border-gray-500 hover:bg-gray-600'
                  }`}
                >
                  <div className="flex items-center gap-3 mb-2">
                    <span className="text-2xl">{theme.icon}</span>
                    <span className="font-medium text-white">{theme.name}</span>
                  </div>
                  <p className="text-sm text-gray-400">{theme.description}</p>
                </button>
              ))}
            </div>
          </div>

          {/* Preview */}
          <div className="bg-gray-700 rounded-xl p-4 border border-gray-600">
            <h4 className="text-white font-semibold mb-3 flex items-center gap-2">
              <span className="text-yellow-400">üëÅÔ∏è</span>
              –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
            </h4>
            <div className="text-sm text-gray-300 space-y-2">
              <p><span className="text-gray-400">–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:</span> {moodOptions.find(m => m.id === tone.mood)?.name}</p>
              <p><span className="text-gray-400">–°—Ç–∏–ª—å –æ–ø–∏—Å–∞–Ω–∏–π:</span> {descriptionStyles.find(s => s.id === tone.descriptionStyle)?.name}</p>
              <p><span className="text-gray-400">–¢–µ–º–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:</span> {uiThemes.find(t => t.id === tone.uiTheme)?.name}</p>
            </div>
          </div>
        </div>

        {/* Footer */}
        <div className="bg-gray-700 px-6 py-4 rounded-b-xl border-t border-gray-600 flex justify-end gap-3">
          <button
            onClick={onClose}
            className="px-4 py-2 text-gray-300 hover:text-white transition-colors"
          >
            –û—Ç–º–µ–Ω–∞
          </button>
          <button
            onClick={handleSave}
            className="px-6 py-2 bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-500 hover:to-indigo-500 text-white rounded-lg font-medium transition-all duration-200 shadow-lg hover:shadow-xl"
          >
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div>
          <h3 className="text-lg font-semibold text-white mb-3">–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</h3>
          <div className="space-y-2">
            {moodOptions.map((option) => (
              <button
                key={option.id}
                onClick={() => handleMoodChange(option.id)}
                className={`w-full p-3 rounded-lg border transition-all duration-200 text-left ${
                  tone.mood === option.id
                    ? 'border-purple-500 bg-purple-500/20'
                    : 'border-gray-600 bg-gray-700 hover:border-gray-500'
                }`}
              >
                <span className="text-white">{option.name}</span>
              </button>
            ))}
          </div>
        </div>

        <div>
          <h3 className="text-lg font-semibold text-white mb-3">–°—Ç–∏–ª—å –æ–ø–∏—Å–∞–Ω–∏–π</h3>
          <div className="space-y-2">
            {descriptionStyles.map((style) => (
              <button
                key={style.id}
                onClick={() => handleDescriptionStyleChange(style.id)}
                className={`w-full p-3 rounded-lg border transition-all duration-200 text-left ${
                  tone.descriptionStyle === style.id
                    ? 'border-blue-500 bg-blue-500/20'
                    : 'border-gray-600 bg-gray-700 hover:border-gray-500'
                }`}
              >
                <span className="text-white">{style.name}</span>
              </button>
            ))}
          </div>
        </div>

        <div>
          <h3 className="text-lg font-semibold text-white mb-3">–¢–µ–º–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</h3>
          <div className="space-y-2">
            {uiThemes.map((theme) => (
              <button
                key={theme.id}
                onClick={() => handleUIThemeChange(theme.id)}
                className={`w-full p-3 rounded-lg border transition-all duration-200 text-left ${
                  tone.uiTheme === theme.id
                    ? 'border-green-500 bg-green-500/20'
                    : 'border-gray-600 bg-gray-700 hover:border-gray-500'
                }`}
              >
                <span className="text-white">{theme.name}</span>
              </button>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}
